normalized_positions.plot$grp <- paste(normalized_positions.plot$Subject,normalized_positions.plot$Item.number)
ggplot(normalized_positions.plot, aes(x=X.Position, y=Y.Position, color=Polarity, group=grp)) + geom_point(alpha=.4, size=1) + theme(legend.position = "none") +
facet_grid(lda_measure_cut~Expected_response)
ggplot(normalized_positions.plot, aes(x=X.Position, y=Y.Position, color=Polarity, group=grp)) + geom_point(alpha=.4, size=1) + theme(legend.position = "none") +
facet_grid(lda_measure_cut~Expected_response)
ggsave('LDA-trajectories1.png', plot = last_plot(), scale = 1, dpi = 300)
ggplot(normalized_positions.plot, aes(x=Time.Step, y=X.Position, color=Polarity, group=grp)) + geom_point(alpha=.4, size=1) + geom_line()+ theme(legend.position = "none") +
facet_grid(lda_measure_cut~Expected_response)
ggsave('LDA-trajectories2.png', plot = last_plot(), scale = 1, dpi = 300)
normalized_positions.means <- ddply(normalized_positions.plot, c("Polarity", "Time.Step", "Expected_response"),
function(normalized_positions.means)c(X.Position.mean=mean(normalized_positions.means$X.Position, na.rm=T), X.Position.se=se(normalized_positions.means$X.Position, na.rm=T)))
ggplot(normalized_positions.means, aes(x=Time.Step, y=X.Position.mean, color=Polarity, group=Polarity)) + geom_point(alpha=.6) + geom_line() + theme(legend.position = "none") + facet_grid(.~Expected_response) +
geom_errorbar(aes(ymin=X.Position.mean-X.Position.se, ymax=X.Position.mean+X.Position.se), width=.1)
normalized_positions.means.traj <- ddply(normalized_positions.plot, c("Polarity", "Time.Step", "Expected_response"),
function(normalized_positions.means)c(X.Position.mean=mean(normalized_positions.means$X.Position, na.rm=T),
X.Position.se=se(normalized_positions.means$X.Position, na.rm=T),
Y.Position.mean=mean(normalized_positions.means$Y.Position, na.rm=T),
Y.Position.se=se(normalized_positions.means$Y.Position, na.rm=T)))
ggplot(normalized_positions.means, aes(x=Time.Step, y=X.Position.mean, color=Polarity, group=Polarity)) + geom_point(alpha=.6) + geom_line() + theme(legend.position = "none") + facet_grid(.~Expected_response) +
geom_errorbar(aes(ymin=X.Position.mean-X.Position.se, ymax=X.Position.mean+X.Position.se), width=.1)
ggplot(normalized_positions.means.traj, aes(x=X.Position.mean, y=Y.Position.mean, color=Polarity, group=Polarity)) + geom_point(alpha=.6) + theme(legend.position = "none") + facet_grid(.~Expected_response)
ggplot(calibration_data, aes(fill=Polarity, x=MaxLogRatio, fill=Polarity)) + geom_histogram(binwidth=1,  position="dodge")+ theme(legend.position = "top")
ggsave('MaxLogRatio.png', plot = last_plot(), scale = 1, dpi = 300)
ggplot(lda_measure.df, aes(fill=Deviation, x=lda_measure, fill=Deviation)) + geom_histogram(binwidth=1,  position="dodge")+ theme(legend.position = "top")
ggsave('LDA-classification.png', plot = last_plot(), scale = 1, dpi = 300)
## CLEAN ENVIRONMENT
rm(list = ls())
##1. CHARGE PACKAGES
source("R_scripts/packages.R")
## 2. EXTRACTING_DATA
source("R_scripts/extracting_data.R")
## 3. CALIBRATION / Choosing measures
#source("R_scripts/choosing_measures.R")
## 4. LDA
source("R_scripts/LDA.R")
lda_measure.df <- data_frame(
lda_measure=c(as.matrix(dplyr::select(left_centre, starts_with("PC"))) %*% v_lda_avg - b_lda_avg),
Deviation=c(left_centre$Deviation),
Subject = c(left_centre$Subject),
Item.number = c(left_centre$Item.number))
ggplot(lda_measure.df, aes(fill=Deviation, x=lda_measure, fill=Deviation)) + geom_histogram(binwidth=1,  position="dodge")+ theme(legend.position = "top")
v_lda_avg <- v_lda_right
b_lda_avg <- b_lda_right
lda_measure.df <- data_frame(
lda_measure=c(as.matrix(dplyr::select(right_centre, starts_with("PC"))) %*% v_lda_avg - b_lda_avg),
Deviation=c(right_centre$Deviation),
Subject = c(right_centre$Subject),
Item.number = c(right_centre$Item.number))
ggplot(lda_measure.df, aes(fill=Deviation, x=lda_measure, fill=Deviation)) + geom_histogram(binwidth=1,  position="dodge")+ theme(legend.position = "top")
library(MASS) # NB: this will mask dplyr::select
x <- paste('x', as.character(c(1:101)), sep='')
y <- paste('y', as.character(c(1:101)), sep='')
normalized_positions = calibration_data %>%
dplyr::select(Subject, Item.number, Polarity, Expected_response, Normalized.positions.X,Normalized.positions.Y) %>%
separate(Normalized.positions.Y, into= y, sep = ",", convert=T) %>%
separate(Normalized.positions.X, into= x, sep = ",", convert=T)
normalized_positions$Subject <- factor(normalized_positions$Subject)
normalized_positions$Item.number <- factor(normalized_positions$Item.number)
normalized_positions$Polarity <- factor(normalized_positions$Polarity)
m_pca <- normalized_positions %>%
dplyr::select(starts_with("x"), starts_with("y")) %>%
as.matrix %>%
prcomp(center = TRUE, scale = FALSE)
normalized_positions_pca <- bind_cols(normalized_positions,
as.data.frame(m_pca$x[,1:10]))
right_centre <- normalized_positions_pca %>%
filter(Expected_response=='true') %>%
mutate(Deviation=ifelse(Polarity == "deviated", "NonCentral", "Central"))
m_lda <- lda(x=dplyr::select(right_centre, starts_with("PC")),
grouping=right_centre$Deviation)
## Third version: combined classifier
v_lda_right <- m_lda$scaling
b_lda_right <- mean(as.matrix(dplyr::select(right_centre, starts_with("PC"))) %*% v_lda_right)
left_centre <- normalized_positions_pca %>%
filter(Expected_response=='false') %>%
mutate(Deviation=ifelse(Polarity == "deviated", "NonCentral", "Central"))
m_lda_left <- lda(x=dplyr::select(left_centre, starts_with("PC")),
grouping=right_centre$Deviation)
v_lda_left <- m_lda_left$scaling
b_lda_left <- mean(as.matrix(dplyr::select(left_centre, starts_with("PC"))) %*% v_lda_left)
v_lda_avg <- (v_lda_right - v_lda_left)/2
b_lda_avg <- (b_lda_right + b_lda_left)/2
#v_lda_avg <- v_lda_left
#b_lda_avg <- b_lda_left
#v_lda_avg <- v_lda_right
#b_lda_avg <- b_lda_right
##new
lda_measure.df <- data_frame(
lda_measure=c(as.matrix(dplyr::select(left_centre, starts_with("PC"))) %*% v_lda_avg - b_lda_avg,
as.matrix(dplyr::select(right_centre, starts_with("PC"))) %*% v_lda_avg - b_lda_avg),
Deviation=c(left_centre$Deviation, right_centre$Deviation),
Subject = c(left_centre$Subject, right_centre$Subject),
Item.number = c(left_centre$Item.number, right_centre$Item.number))
ggplot(lda_measure.df, aes(fill=Deviation, x=lda_measure, fill=Deviation)) + geom_histogram(binwidth=1,  position="dodge")+ theme(legend.position = "top")
source('~/WebstormProjects/negationMT/R_scripts/LDA.R', echo=TRUE)
source('~/WebstormProjects/negationMT/R_scripts/LDA.R', echo=TRUE)
View(calibration_data)
normalized_positions = calibration_data %>%
dplyr::select(Subject, Item.number, Polarity, Expected_response, Normalized.positions.X,Normalized.positions.Y) %>%
separate(Normalized.positions.Y, into= y, sep = ",", convert=T) %>%
separate(Normalized.positions.X, into= x, sep = ",", convert=T) %>%
dplyr::mutate_at(starts_with('x'), abs)
View(normalized_positions)
normalized_positions$x1
normalized_positions = dplyr::mutate_at(normalized_positions, starts_with('x'), abs)
normalized_positions2 = dplyr::select(normalized_positions, starts_with('x'))
head(normalized_positions2)
normalized_positions2 = dplyr::mutate_at(normalized_positions, vars(starts_with('x')), funs(abs))
head(normalized_positions2)
normalized_positions_false = normalized_positions%>%
filter(Expected_response='false')%>%
dplyr::mutate_at(vars(starts_with('x')), funs('-'))
normalized_positions_false = normalized_positions%>%
filter(Expected_response=='false')%>%
dplyr::mutate_at(vars(starts_with('x')), funs('-'))
View(normalized_positions)
View(normalized_positions_false)
normalized_positions_true = filter(normalized_positions, Expected_response=='true')
normalized_positions = bind_rows(normalized_positions_false,normalized_positions_true)
normalized_positions$Subject <- factor(normalized_positions$Subject)
normalized_positions$Item.number <- factor(normalized_positions$Item.number)
normalized_positions$Polarity <- factor(normalized_positions$Polarity)
m_pca <- normalized_positions %>%
dplyr::select(starts_with("x"), starts_with("y")) %>%
as.matrix %>%
prcomp(center = TRUE, scale = FALSE)
normalized_positions_pca <- bind_cols(normalized_positions,
as.data.frame(m_pca$x[,1:10]))
normalized_positions_pca <- normalized_positions_pca %>%
mutate(Deviation=ifelse(Polarity == "deviated", "NonCentral", "Central"))
m_lda <- lda(x=dplyr::select(normalized_positions_pca, starts_with("PC")),
grouping=normalized_positions_pca$Deviation)
source('~/WebstormProjects/negationMT/R_scripts/LDA.R', echo=TRUE)
ggplot(lda_measure.df, aes(fill=Deviation, x=lda_measure, fill=Deviation)) + geom_histogram(binwidth=1,  position="dodge")+ theme(legend.position = "top") + facet_grid(.~Expected_response)
lda_measure.df <- data_frame(
lda_measure=c(as.matrix(dplyr::select(normalized_positions_pca, starts_with("PC"))) %*% v_lda - b_lda),
Deviation=c(normalized_positions_pca$Deviation),
Subject = c(normalized_positions_pca$Subject),
Expected_response = normalized_positions_pca$Expected_response,
Item.number = c(normalized_positions_pca$Item.number))
ggplot(lda_measure.df, aes(fill=Deviation, x=lda_measure, fill=Deviation)) +
geom_histogram(binwidth=1,  position="dodge")+
theme(legend.position = "top") +
facet_grid(.~Expected_response)
save(m_pca)
save(m_pca, csv)
save(m_pca, v_lda, b_lda, file="transformation.RData")
rm(list = ls())
##1. CHARGE PACKAGES
source("R_scripts/packages.R")
## 2. EXTRACTING_DATA
source("R_scripts/extracting_data.R")
library(MASS) # NB: this will mask dplyr::select
x <- paste('x', as.character(c(1:101)), sep='')
y <- paste('y', as.character(c(1:101)), sep='')
normalized_positions = calibration_data %>%
dplyr::select(Subject, Item.number, Polarity, Expected_response, Normalized.positions.X,Normalized.positions.Y) %>%
separate(Normalized.positions.Y, into= y, sep = ",", convert=T) %>%
separate(Normalized.positions.X, into= x, sep = ",", convert=T)
normalized_positions_false = normalized_positions%>%
filter(Expected_response=='false')%>%
dplyr::mutate_at(vars(starts_with('x')), funs('-'))
normalized_positions_true = filter(normalized_positions, Expected_response=='true')
normalized_positions = bind_rows(normalized_positions_false,normalized_positions_true)
normalized_positions$Subject <- factor(normalized_positions$Subject)
normalized_positions$Item.number <- factor(normalized_positions$Item.number)
normalized_positions$Polarity <- factor(normalized_positions$Polarity)
m_pca <- normalized_positions %>%
dplyr::select(starts_with("x"), starts_with("y")) %>%
as.matrix %>%
prcomp(center = TRUE, scale = FALSE)
normalized_positions_pca <- bind_cols(normalized_positions,
as.data.frame(m_pca$x[,1:10]))
normalized_positions_pca <- normalized_positions_pca %>%
mutate(Deviation=ifelse(Polarity == "deviated", "NonCentral", "Central"))
m_lda <- lda(x=dplyr::select(normalized_positions_pca, starts_with("PC")),
grouping=normalized_positions_pca$Deviation)
v_lda <- m_lda$scaling
b_lda <- mean(as.matrix(dplyr::select(normalized_positions_pca, starts_with("PC"))) %*% v_lda)
save(m_pca, v_lda, b_lda, file="transformation.RData")
lda_measure.df <- data_frame(
lda_measure=c(as.matrix(dplyr::select(normalized_positions_pca, starts_with("PC"))) %*% v_lda - b_lda),
Deviation=c(normalized_positions_pca$Deviation),
Subject = c(normalized_positions_pca$Subject),
Expected_response = normalized_positions_pca$Expected_response,
Item.number = c(normalized_positions_pca$Item.number))
ggplot(lda_measure.df, aes(fill=Deviation, x=lda_measure, fill=Deviation)) +
geom_histogram(binwidth=1,  position="dodge")+
theme(legend.position = "top") +
facet_grid(.~Expected_response)
ggsave('LDA-classification.png', plot = last_plot(), scale = 1, dpi = 300)
calibration_data <- dplyr::full_join(lda_measure.df, calibration_data, by=c("Subject", "Item.number"))
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, lda_measure, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104)
normalized_positions.plot.Y = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, lda_measure,  Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104)
normalized_positions.plot <- merge(normalized_positions.plot.X,normalized_positions.plot.Y)
rm(normalized_positions.plot.X,normalized_positions.plot.Y)
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, lda_measure, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104)
source('~/WebstormProjects/negationMT/R_scripts/LDA.R', echo=TRUE)
## CLEAN ENVIRONMENT
rm(list = ls())
##1. CHARGE PACKAGES
source("R_scripts/packages.R")
## 2. EXTRACTING_DATA
source("R_scripts/extracting_data.R")
source('~/WebstormProjects/negationMT/R_scripts/LDA.R', echo=TRUE)
View(calibration_data)
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, lda_measure, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104)
normalized_positions.plot.Y = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, lda_measure,  Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104)
normalized_positions.plot <- merge(normalized_positions.plot.X,normalized_positions.plot.Y)
rm(normalized_positions.plot.X,normalized_positions.plot.Y)
View(calibration_data)
calibration_data <- dplyr::full_join(lda_measure.df, calibration_data, by=c("Subject", "Item.number", "Expected_response"))
rm(list = ls())
##1. CHARGE PACKAGES
source("R_scripts/packages.R")
## 2. EXTRACTING_DATA
source("R_scripts/extracting_data.R")
source('~/WebstormProjects/negationMT/R_scripts/LDA.R', echo=TRUE)
View(calibration_data)
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, lda_measure, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104)
normalized_positions.plot.Y = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, lda_measure,  Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104)
normalized_positions.plot <- merge(normalized_positions.plot.X,normalized_positions.plot.Y)
rm(normalized_positions.plot.X,normalized_positions.plot.Y)
normalized_positions.plot$X.Position <- as.numeric(normalized_positions.plot$X.Position)
normalized_positions.plot$X.Position <- -(normalized_positions.plot$X.Position)
normalized_positions.plot$Y.Position <- as.numeric(normalized_positions.plot$Y.Position)
normalized_positions.plot$Time.Step <- as.numeric(normalized_positions.plot$Time.Step)
normalized_positions.plot$Subject <- factor(normalized_positions.plot$Subject)
normalized_positions.plot$Polarity <- factor(normalized_positions.plot$Polarity )
normalized_positions.plot$lda_measure_cut <- cut(normalized_positions.plot$lda_measure, 6)
normalized_positions.plot$grp <- paste(normalized_positions.plot$Subject,normalized_positions.plot$Item.number)
ggplot(normalized_positions.plot, aes(x=X.Position, y=Y.Position, color=Polarity, group=grp)) + geom_point(alpha=.4, size=1) + theme(legend.position = "none") +
facet_grid(lda_measure_cut~Expected_response)
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, lda_measure, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104)
normalized_positions.plot.X$X.Position <- -(normalized_positions.plot.X$X.Position)
normalized_positions.plot.X$X.Position
normalized_positions.plot.X$X.Position <- as.numeric(normalized_positions.plot.X$X.Position)
normalized_positions.plot.X$X.Position <- -(normalized_positions.plot.X$X.Position)
normalized_positions.plot.Y = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, lda_measure,  Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104)
normalized_positions.plot <- merge(normalized_positions.plot.X,normalized_positions.plot.Y)
rm(normalized_positions.plot.X,normalized_positions.plot.Y)
normalized_positions.plot$X.Position <- as.numeric(normalized_positions.plot$X.Position)
normalized_positions.plot$Y.Position <- as.numeric(normalized_positions.plot$Y.Position)
normalized_positions.plot$Time.Step <- as.numeric(normalized_positions.plot$Time.Step)
normalized_positions.plot$Subject <- factor(normalized_positions.plot$Subject)
normalized_positions.plot$Polarity <- factor(normalized_positions.plot$Polarity )
normalized_positions.plot$lda_measure_cut <- cut(normalized_positions.plot$lda_measure, 6)
normalized_positions.plot$grp <- paste(normalized_positions.plot$Subject,normalized_positions.plot$Item.number)
ggplot(normalized_positions.plot, aes(x=X.Position, y=Y.Position, color=Polarity, group=grp)) + geom_point(alpha=.4, size=1) + theme(legend.position = "none") +
facet_grid(lda_measure_cut~Expected_response)
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, lda_measure, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104)
normalized_positions.plot.X$X.Position <- as.numeric(normalized_positions.plot.X$X.Position)
normalized_positions.plot$X.Position<- as.numeric(normalized_positions.plot$X.Position)
normalized_positions.plot$X.Position[normalized_positions.plot$Expected_response=='false'] <- -(normalized_positions.plot$X.Position)
normalized_positions.plot.false = normalized_positions.plot %>%
filter(Expected_response=='false')%>%
dplyr::mutate_at(vars('X.Position'), funs('-'))
normalized_positions.plot.false = normalized_positions.plot %>%
filter(Expected_response=='false')%>%
dplyr::mutate('X.Position', funs('-'))
normalized_positions.plot.false = normalized_positions.plot %>%
filter(Expected_response=='false')%>%
dplyr::mutate('X.Position', funs('-'))
normalized_positions.plot.false = normalized_positions.plot %>%
filter(Expected_response=='false')%>%
dplyr::mutate_at('X.Position', funs('-'))
ggplot(normalized_positions.plot.false, aes(x=X.Position, y=Y.Position, color=Polarity, group=grp)) + geom_point(alpha=.4, size=1) + theme(legend.position = "none") +
facet_grid(lda_measure_cut~.)
normalized_positions.plot <- merge(normalized_positions.plot.false, normalized_positions.plot.true)
normalized_positions.plot.true = normalized_positions.plot %>%
filter(Expected_response=='true')
#Plotting trajectories
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, lda_measure, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104)
normalized_positions.plot.Y = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, lda_measure,  Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104)
normalized_positions.plot <- merge(normalized_positions.plot.X,normalized_positions.plot.Y)
rm(normalized_positions.plot.X,normalized_positions.plot.Y)
normalized_positions.plot$X.Position<- as.numeric(normalized_positions.plot$X.Position)
normalized_positions.plot$Y.Position <- as.numeric(normalized_positions.plot$Y.Position)
normalized_positions.plot$Time.Step <- as.numeric(normalized_positions.plot$Time.Step)
normalized_positions.plot$Subject <- factor(normalized_positions.plot$Subject)
normalized_positions.plot$Polarity <- factor(normalized_positions.plot$Polarity )
normalized_positions.plot$lda_measure_cut <- cut(normalized_positions.plot$lda_measure, 6)
normalized_positions.plot$grp <- paste(normalized_positions.plot$Subject,normalized_positions.plot$Item.number)
normalized_positions.plot.false = normalized_positions.plot %>%
filter(Expected_response=='false')%>%
dplyr::mutate_at('X.Position', funs('-'))
normalized_positions.plot.true = normalized_positions.plot %>%
filter(Expected_response=='true')
normalized_positions.plot <- merge(normalized_positions.plot.false, normalized_positions.plot.true)
ggplot(normalized_positions.plot, aes(x=X.Position, y=Y.Position, color=Polarity, group=grp)) + geom_point(alpha=.4, size=1) + theme(legend.position = "none") +
facet_grid(lda_measure_cut~Expected_response)
normalized_positions.plot
#Plotting trajectories
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, lda_measure, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104)
normalized_positions.plot.Y = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, lda_measure,  Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104)
normalized_positions.plot <- merge(normalized_positions.plot.X,normalized_positions.plot.Y)
rm(normalized_positions.plot.X,normalized_positions.plot.Y)
normalized_positions.plot$X.Position<- as.numeric(normalized_positions.plot$X.Position)
normalized_positions.plot$Y.Position <- as.numeric(normalized_positions.plot$Y.Position)
normalized_positions.plot$Time.Step <- as.numeric(normalized_positions.plot$Time.Step)
normalized_positions.plot$Subject <- factor(normalized_positions.plot$Subject)
normalized_positions.plot$Polarity <- factor(normalized_positions.plot$Polarity )
normalized_positions.plot$lda_measure_cut <- cut(normalized_positions.plot$lda_measure, 6)
normalized_positions.plot$grp <- paste(normalized_positions.plot$Subject,normalized_positions.plot$Item.number)
normalized_positions.plot.false = normalized_positions.plot %>%
filter(Expected_response=='false')%>%
dplyr::mutate_at('X.Position', funs('-'))
normalized_positions.plot.false
normalized_positions.plot.true = normalized_positions.plot %>%
filter(Expected_response=='true')
normalized_positions.plot <- rbind(normalized_positions.plot.false, normalized_positions.plot.true)
ggplot(normalized_positions.plot, aes(x=X.Position, y=Y.Position, color=Polarity, group=grp)) + geom_point(alpha=.4, size=1) + theme(legend.position = "none") +
facet_grid(lda_measure_cut~Expected_response)
ggplot(normalized_positions.plot, aes(x=X.Position, y=Y.Position, color=Polarity, group=grp)) + geom_point(alpha=.4, size=1) + theme(legend.position = "none") +
facet_grid(lda_measure_cut~Expected_response+Sentence_Type)
ggsave('LDA-trajectories1.png', plot = last_plot(), scale = 1, dpi = 300)
library(MASS) # NB: this will mask dplyr::select
x <- paste('x', as.character(c(1:101)), sep='')
y <- paste('y', as.character(c(1:101)), sep='')
normalized_positions = calibration_data %>%
dplyr::select(Subject, Item.number, Polarity, Expected_response, Normalized.positions.X,Normalized.positions.Y) %>%
separate(Normalized.positions.Y, into= y, sep = ",", convert=T) %>%
separate(Normalized.positions.X, into= x, sep = ",", convert=T)
normalized_positions_false = normalized_positions%>%
#  filter(Expected_response=='false')%>%
filter(Expected_response=='false')
#  dplyr::mutate_at(vars(starts_with('x')), funs('-'))
normalized_positions_true = filter(normalized_positions, Expected_response=='true')
normalized_positions = bind_rows(normalized_positions_false,normalized_positions_true)
normalized_positions$Subject <- factor(normalized_positions$Subject)
normalized_positions$Item.number <- factor(normalized_positions$Item.number)
normalized_positions$Polarity <- factor(normalized_positions$Polarity)
dplyr::select(normalized_positions, starts_with("x")) %>% summarize_all(mean)
dplyr::select(as.data.frame(normalized_positions=, starts_with("x")) %>% summarize_all(mean)
dplyr::select(as.data.frame(normalized_positions), starts_with("x")) %>% summarize_all(mean)
#Plotting trajectories
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, lda_measure, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104)
normalized_positions.plot.Y = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, lda_measure,  Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104)
normalized_positions.plot <- merge(normalized_positions.plot.X,normalized_positions.plot.Y)
rm(normalized_positions.plot.X,normalized_positions.plot.Y)
normalized_positions.plot$X.Position<- as.numeric(normalized_positions.plot$X.Position)
normalized_positions.plot$Y.Position <- as.numeric(normalized_positions.plot$Y.Position)
normalized_positions.plot$Time.Step <- as.numeric(normalized_positions.plot$Time.Step)
normalized_positions.plot$Subject <- factor(normalized_positions.plot$Subject)
normalized_positions.plot$Polarity <- factor(normalized_positions.plot$Polarity )
normalized_positions.plot$lda_measure_cut <- cut(normalized_positions.plot$lda_measure, 6)
normalized_positions.plot$grp <- paste(normalized_positions.plot$Subject,normalized_positions.plot$Item.number)
normalized_positions.plot.false = normalized_positions.plot %>%
filter(Expected_response=='false')%>%
dplyr::mutate_at('X.Position', funs('-'))
normalized_positions.plot.true = normalized_positions.plot %>%
filter(Expected_response=='true')
normalized_positions.plot <- rbind(normalized_positions.plot.false, normalized_positions.plot.true)
#Plotting real subjects
ggplot(normalized_positions.plot, aes(x=X.Position, y=Y.Position, color=Polarity, group=grp)) + geom_point(alpha=.4, size=1) + theme(legend.position = "none") +
facet_grid(lda_measure_cut~Expected_response)
ggsave('LDA-trajectories1.png', plot = last_plot(), scale = 1, dpi = 300)
ggplot(normalized_positions.plot, aes(x=Time.Step, y=X.Position, color=Polarity, group=grp)) + geom_point(alpha=.4, size=1) + geom_line()+ theme(legend.position = "none") +
facet_grid(lda_measure_cut~Expected_response)
ggsave('LDA-trajectories2.png', plot = last_plot(), scale = 1, dpi = 300)
m_pca
m_pca$center
dplyr::select(as.data.frame(normalized_positions), starts_with("x")) %>% summarize_all(mean)
prcomp
?prcomp
library(MASS) # NB: this will mask dplyr::select
x <- paste('x', as.character(c(1:101)), sep='')
y <- paste('y', as.character(c(1:101)), sep='')
normalized_positions = calibration_data %>%
dplyr::select(Subject, Item.number, Polarity, Expected_response, Normalized.positions.X,Normalized.positions.Y) %>%
separate(Normalized.positions.Y, into= y, sep = ",", convert=T) %>%
separate(Normalized.positions.X, into= x, sep = ",", convert=T)
normalized_positions_false = normalized_positions%>%
#  filter(Expected_response=='false')%>%
filter(Expected_response=='false')
#  dplyr::mutate_at(vars(starts_with('x')), funs('-'))
normalized_positions_true = filter(normalized_positions, Expected_response=='true')
normalized_positions = bind_rows(normalized_positions_false,normalized_positions_true)
normalized_positions$Subject <- factor(normalized_positions$Subject)
normalized_positions$Item.number <- factor(normalized_positions$Item.number)
normalized_positions$Polarity <- factor(normalized_positions$Polarity)
m_pca <- normalized_positions %>%
dplyr::select(starts_with("x"), starts_with("y")) %>%
as.matrix %>%
prcomp(center = TRUE, scale = TRUE)
normalized_positions_pca <- bind_cols(normalized_positions,
as.data.frame(m_pca$x[,1:10]))
normalized_positions_pca <- normalized_positions_pca %>%
mutate(Deviation=ifelse(Polarity == "deviated", "NonCentral", "Central"))
m_lda <- lda(x=dplyr::select(normalized_positions_pca, starts_with("PC")),
grouping=normalized_positions_pca$Deviation)
# left <- normalized_positions_pca %>%
#   filter(Expected_response=='false', Polarity == "deviated") %>%
#   mutate(Deviation=ifelse(Polarity == "deviated", "Left", "WTF"))
## Third version: combined classifier
v_lda <- m_lda$scaling
b_lda <- mean(as.matrix(dplyr::select(normalized_positions_pca, starts_with("PC"))) %*% v_lda)
save(m_pca, v_lda, b_lda, file="transformation.RData")
library(MASS) # NB: this will mask dplyr::select
x <- paste('x', as.character(c(1:101)), sep='')
y <- paste('y', as.character(c(1:101)), sep='')
normalized_positions = calibration_data %>%
dplyr::select(Subject, Item.number, Polarity, Expected_response, Normalized.positions.X,Normalized.positions.Y) %>%
separate(Normalized.positions.Y, into= y, sep = ",", convert=T) %>%
separate(Normalized.positions.X, into= x, sep = ",", convert=T)
normalized_positions_false = normalized_positions%>%
filter(Expected_response=='false')%>%
dplyr::mutate_at(vars(starts_with('x')), funs('-'))
normalized_positions_true = filter(normalized_positions, Expected_response=='true')
normalized_positions = bind_rows(normalized_positions_false,normalized_positions_true)
normalized_positions$Subject <- factor(normalized_positions$Subject)
normalized_positions$Item.number <- factor(normalized_positions$Item.number)
normalized_positions$Polarity <- factor(normalized_positions$Polarity)
m_pca <- normalized_positions %>%
dplyr::select(starts_with("x"), starts_with("y")) %>%
as.matrix %>%
prcomp(center = TRUE, scale = TRUE)
normalized_positions_pca <- bind_cols(normalized_positions,
as.data.frame(m_pca$x[,1:10]))
normalized_positions_pca <- normalized_positions_pca %>%
mutate(Deviation=ifelse(Polarity == "deviated", "NonCentral", "Central"))
m_lda <- lda(x=dplyr::select(normalized_positions_pca, starts_with("PC")),
grouping=normalized_positions_pca$Deviation)
# left <- normalized_positions_pca %>%
#   filter(Expected_response=='false', Polarity == "deviated") %>%
#   mutate(Deviation=ifelse(Polarity == "deviated", "Left", "WTF"))
## Third version: combined classifier
v_lda <- m_lda$scaling
b_lda <- mean(as.matrix(dplyr::select(normalized_positions_pca, starts_with("PC"))) %*% v_lda)
save(m_pca, v_lda, b_lda, file="transformation.RData")
library(MASS) # NB: this will mask dplyr::select
x <- paste('x', as.character(c(1:101)), sep='')
y <- paste('y', as.character(c(1:101)), sep='')
normalized_positions = calibration_data %>%
dplyr::select(Subject, Item.number, Polarity, Expected_response, Normalized.positions.X,Normalized.positions.Y) %>%
separate(Normalized.positions.Y, into= y, sep = ",", convert=T) %>%
separate(Normalized.positions.X, into= x, sep = ",", convert=T)
normalized_positions_false = normalized_positions%>%
filter(Expected_response=='false')%>%
dplyr::mutate_at(vars(starts_with('x')), funs('-'))
normalized_positions_true = filter(normalized_positions, Expected_response=='true')
normalized_positions = bind_rows(normalized_positions_false,normalized_positions_true)
normalized_positions$Subject <- factor(normalized_positions$Subject)
normalized_positions$Item.number <- factor(normalized_positions$Item.number)
normalized_positions$Polarity <- factor(normalized_positions$Polarity)
normalized_positions <- normalized_positions %>%
mutate(Deviation=ifelse(Polarity == "deviated", "NonCentral", "Central"))
m_lda <- lda(x=dplyr::select(normalized_positions, starts_with("x"), starts_with("y")),
grouping=normalized_positions$Deviation)
cor(dplyr::select(normalized_positions, starts_with("x"), starts_with("y")))
upper.tri(cor(dplyr::select(normalized_positions, starts_with("x"), starts_with("y"))))
(cor(dplyr::select(normalized_positions, starts_with("x"), starts_with("y"))))[upper.tri(cor(dplyr::select(normalized_positions, starts_with("x"), starts_with("y"))))]
cor(dplyr::select(normalized_positions, starts_with("x"), starts_with("y"))) > 0.99
sum(cor(dplyr::select(normalized_positions, starts_with("x"), starts_with("y"))) > 0.99)
sum(cor(dplyr::select(normalized_positions, starts_with("y"))) > 0.99)
cor(dplyr::select(normalized_positions, starts_with("y"))) > 0.99
cor(dplyr::select(normalized_positions, starts_with("x"))) > 0.99
View(cor(dplyr::select(normalized_positions, starts_with("x"))) > 0.99)
View(cor(dplyr::select(normalized_positions, starts_with("y"))) > 0.99)
rm(list = ls())
##1. CHARGE PACKAGES
source("R_scripts/packages.R")
## 2. EXTRACTING_DATA
source("R_scripts/extracting_data.R")
