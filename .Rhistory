View(normalized_positions)
normalized_positions
normalized_positions[104]
normalized_positions[102]
x <- paste('x', as.character(c(1:100)), sep='')
y <- paste('x', as.character(c(1:100)), sep='')
normalized_positions = calibration_data %>%
select(Subject, Normalized.positions.X,Normalized.positions.Y, Polarity, Expected_response) %>%
separate(Normalized.positions.X, into= x, sep = ",") %>%
separate(Normalized.positions.Y, into= y, sep = ",")
x <- paste('x', as.character(c(1:101)), sep='')
y <- paste('x', as.character(c(1:101)), sep='')
normalized_positions = calibration_data %>%
select(Subject, Normalized.positions.X,Normalized.positions.Y, Polarity, Expected_response) %>%
separate(Normalized.positions.X, into= x, sep = ",") %>%
separate(Normalized.positions.Y, into= y, sep = ",")
##1. CHARGE PACKAGES
source("R_scripts/packages.R")
## 2. EXTRACTING_DATA
source("R_scripts/extracting_data.R")
x <- paste('x', as.character(c(1:101)), sep='')
y <- paste('x', as.character(c(1:101)), sep='')
normalized_positions = calibration_data %>%
select(Subject, Normalized.positions.X,Normalized.positions.Y, Polarity, Expected_response) %>%
separate(Normalized.positions.X, into= x, sep = ",") %>%
separate(Normalized.positions.Y, into= y, sep = ",")
x <- paste('x', as.character(c(1:101)), sep='')
y <- paste('y', as.character(c(1:101)), sep='')
normalized_positions = calibration_data %>%
select(Subject, Normalized.positions.X,Normalized.positions.Y, Polarity, Expected_response) %>%
separate(Normalized.positions.X, into= x, sep = ",") %>%
separate(Normalized.positions.Y, into= y, sep = ",")
View(normalized_positions)
head(normalized_positions)
x <- paste('x', as.character(c(1:100)), sep='')
y <- paste('y', as.character(c(1:100)), sep='')
normalized_positions = calibration_data %>%
select(Subject, Normalized.positions.X,Normalized.positions.Y, Polarity, Expected_response) %>%
separate(Normalized.positions.X, into= x, sep = ",") %>%
separate(Normalized.positions.Y, into= y, sep = ",")
head(normalized_positions)
View(calibration_data)
normalized_positions = calibration_data %>%
select(Subject, Normalized.positions.X,Normalized.positions.Y, Polarity, Expected_response)
View(normalized_positions)
normalized_positions$Normalized.positions.Y
normalized_positions$Normalized.positions.Y[1]
normalized_positions = calibration_data %>%
select(Subject, Normalized.positions.X,Normalized.positions.Y, Polarity, Expected_response) %>%
separate(Normalized.positions.X, into= x, sep = ",")
x <- paste('x', as.character(c(1:101)), sep='')
y <- paste('y', as.character(c(1:100)), sep='')
normalized_positions = calibration_data %>%
select(Subject, Normalized.positions.X,Normalized.positions.Y, Polarity, Expected_response) %>%
separate(Normalized.positions.X, into= x, sep = ",")
x <- paste('x', as.character(c(1:101)), sep='')
y <- paste('y', as.character(c(1:101)), sep='')
normalized_positions = calibration_data %>%
select(Subject, Normalized.positions.X,Normalized.positions.Y, Polarity, Expected_response) %>%
separate(Normalized.positions.y, into= y, sep = ",")
normalized_positions = calibration_data %>%
select(Subject, Normalized.positions.X,Normalized.positions.Y, Polarity, Expected_response) %>%
separate(Normalized.positions.Y, into= y, sep = ",")
##1. CHARGE PACKAGES
source("R_scripts/packages.R")
## 2. EXTRACTING_DATA
source("R_scripts/extracting_data.R")
x <- paste('x', as.character(c(1:101)), sep='')
y <- paste('y', as.character(c(1:101)), sep='')
normalized_positions = calibration_data %>%
select(Subject, Normalized.positions.X,Normalized.positions.Y, Polarity, Expected_response) %>%
separate(Normalized.positions.Y, into= y, sep = ",") %>%
separate(Normalized.positions.X, into= x, sep = ",")
##1. CHARGE PACKAGES
source("R_scripts/packages.R")
## 2. EXTRACTING_DATA
source("R_scripts/extracting_data.R")
normalized_positions = calibration_data %>%
select(Subject, Normalized.positions.X,Normalized.positions.Y, Polarity, Expected_response) %>%
separate(Normalized.positions.Y, into= y, sep = ",") %>%
separate(Normalized.positions.X, into= x, sep = ",")
head(normalized_positions)
##1. CHARGE PACKAGES
source("R_scripts/packages.R")
## 2. EXTRACTING_DATA
source("R_scripts/extracting_data.R")
x <- paste('x', as.character(c(1:101)), sep='')
y <- paste('y', as.character(c(1:101)), sep='')
normalized_positions = calibration_data %>%
select(Subject, Normalized.positions.X,Normalized.positions.Y, Polarity, Expected_response) %>%
separate(Normalized.positions.Y, into= y, sep = ",") %>%
separate(Normalized.positions.X, into= x, sep = ",")
normalized_positions$Subject <- factor(normalized_positions$Subject)
normalized_positions$Polarity <- factor(normalized_positions$Polarity )
my_data = normalized_positions %>%
filter(Expected_response=='true')
library(MASS)
fit <- lda(formula = Polarity ~ .,
data = my_data, CV=TRUE)
View(normalized_positions)
View(my_data)
View(normalized_positions)
normalized_positions$Polarity
View(normalized_positions)
detach("package:MASS", unload=TRUE)
x <- paste('x', as.character(c(1:101)), sep='')
y <- paste('y', as.character(c(1:101)), sep='')
normalized_positions = calibration_data %>%
select(Subject, Polarity, Expected_response, Normalized.positions.X,Normalized.positions.Y) %>%
separate(Normalized.positions.Y, into= y, sep = ",") %>%
separate(Normalized.positions.X, into= x, sep = ",")
normalized_positions$Subject <- factor(normalized_positions$Subject)
normalized_positions$Polarity <- factor(normalized_positions$Polarity )
View(normalized_positions)
#LDA for real data
my_data = normalized_positions %>%
filter(Expected_response=='true')
View(my_data)
library(MASS)
fit <- lda(formula = Polarity ~ .,
data = my_data, CV=TRUE)
detach("package:MASS", unload=TRUE)
#LDA for real data
my_data = normalized_positions %>%
filter(Expected_response=='true')$>$
select(-Expected_response)
#LDA for real data
my_data = normalized_positions %>%
filter(Expected_response=='true')$>$
select(-Expected_response)
my_data = normalized_positions %>%
filter(Expected_response=='true')%>%
select(-Expected_response)
library(MASS)
fit <- lda(formula = Polarity ~ .,
data = my_data, CV=TRUE)
ct <- table(my_data$Polarity, fit$class)
ct
diag(prop.table(ct, 1))
View(my_data)
detach("package:MASS", unload=TRUE)
my_data = normalized_positions %>%
filter(Expected_response=='true')%>%
select(-Expected_response,-Subject)
fit <- lda(formula = Polarity ~ .,
data = my_data, CV=TRUE)
library(MASS)
fit <- lda(formula = Polarity ~ .,
data = my_data, CV=TRUE)
fit
ct <- table(my_data$Polarity, fit$class)
ct
diag(prop.table(ct, 1))
View(my_data)
fit
fit <- lda(formula = Polarity ~ .,
data = my_data)
fit
fit <- lda(formula = Polarity ~ .,
data = my_data, CV=TRUE)
ct <- table(my_data$Polarity, fit$class)
ct
diag(prop.table(ct, 1))
View(my_data)
fit <- lda(formula = Polarity ~ .,
data = my_data, CV=TRUE)
ct <- table(my_data$Polarity, fit$class)
ct
View(my_data)
fit <- lda(formula = Polarity ~ .,
data = my_data, CV=TRUE)
ct <- table(my_data$Polarity, fit$class)
ct
diag(prop.table(ct, 1))
fit <- lda(formula = Polarity ~ .,
data = my_data, CV=TRUE)
ct <- table(my_data$Polarity, fit$class)
ct
diag(prop.table(ct, 1))
fit <- lda(formula = Polarity ~ .,
data = my_data, CV=TRUE)
ct <- table(my_data$Polarity, fit$class)
ct
diag(prop.table(ct, 1))
fit <- lda(formula = Polarity ~ .,
data = my_data, CV=TRUE)
ct <- table(my_data$Polarity, fit$class)
ct
diag(prop.table(ct, 1))
fit <- lda(formula = Polarity ~ .,
data = my_data, CV=TRUE)
ct <- table(my_data$Polarity, fit$class)
ct
diag(prop.table(ct, 1))
fit <- lda(formula = Polarity ~ .,
data = my_data)
fit
fit$svd
fit <- lda(formula = Polarity ~ .,
data = my_data)
prop = fit$svd^2/sum(fit$svd^2)
prop
fit <- lda(formula = Polarity ~ .,
data = my_data, CV=TRUE)
fit
ct <- table(my_data$Polarity, fit$class)
ct
ex.x <- paste('x', as.character(c(1:25)), sep='') +  paste('x', as.character(c(75:101)), sep='')
ex.x <- paste('x', as.character(c(1:25)), sep='')
ex.y <- paste('y', as.character(c(1:25)), sep='')
my_data = normalized_positions %>%
filter(Expected_response=='true')%>%
select(-Expected_response,-Subject) %>%
select(-ex.x, -ex.y)
detach("package:MASS", unload=TRUE)
my_data = normalized_positions %>%
filter(Expected_response=='true')%>%
select(-Expected_response,-Subject) %>%
select(-ex.x, -ex.y)
my_data = normalized_positions %>%
filter(Expected_response=='true')%>%
select(-Expected_response,-Subject) %>%
select(-c(ex.x,ex.y))
my_data = normalized_positions %>%
filter(Expected_response=='true')%>%
select(-Expected_response,-Subject)
res <- prcomp(my_data, center = TRUE, scale = FALSE)
res <- procomp(my_data, center = TRUE, scale = FALSE)
my_data = normalized_positions %>%
filter(Expected_response=='true')%>%
select(-Expected_response,-Subject,-Polarity)
res <- procomp(my_data, center = TRUE, scale = FALSE)
res <- prcomp(my_data, center = TRUE, scale = FALSE)
my_data
numeric(my_data)
my_data1 <- as.data.frame(sapply(my_data, as.numeric))
View(my_data1)
View(my_data)
View(my_data1)
res <- prcomp(my_data1, center = TRUE, scale = FALSE)
names(res)
res$x
ex.x <- paste('x', as.character(c(25:75)), sep='')
ex.y <- paste('y', as.character(c(25:75)), sep='')
my_data2 <- my_data %>%
select(one_of(ex.x))
View(my_data2)
my_data2 <- my_data %>%
select(one_of(ex.x), one_of(ex.y))
View(my_data2)
fit <- lda(formula = Polarity ~ .,
data = my_data, CV=TRUE)
library(MASS)
fit <- lda(formula = Polarity ~ .,
data = my_data, CV=TRUE)
my_data = normalized_positions %>%
filter(Expected_response=='true')%>%
select(-Expected_response,-Subject)
detach("package:MASS", unload=TRUE)
my_data = normalized_positions %>%
filter(Expected_response=='true')%>%
select(-Expected_response,-Subject)
#Part of data (done by hand)
ex.x <- paste('x', as.character(c(25:75)), sep='')
ex.y <- paste('y', as.character(c(25:75)), sep='')
my_data2 <- my_data %>%
select(one_of(ex.x), one_of(ex.y))
library(MASS)
fit <- lda(formula = Polarity ~ .,
data = my_data, CV=TRUE)
my_data2 <- my_data %>%
select(one_of(ex.x))
detach("package:MASS", unload=TRUE)
my_data2 <- my_data %>%
select(one_of(ex.x))
library(MASS)
fit <- lda(formula = Polarity ~ .,
data = my_data, CV=TRUE)
detach("package:MASS", unload=TRUE)
my_data1 <- as.data.frame(sapply(my_data, as.numeric))
res <- prcomp(my_data1, center = TRUE, scale = FALSE)
names(res)
head(unclass(res.pca$rotation)[, 1:4])
head(unclass(res$rotation)[, 1:4])
my_data = normalized_positions %>%
filter(Expected_response=='true')%>%
select(-Expected_response,-Subject,-Polarity)
my_data1 <- as.data.frame(sapply(my_data, as.numeric))
res <- prcomp(my_data1, center = TRUE, scale = FALSE)
names(res)
head(unclass(res$rotation)[, 1:4])
summary(res)
plot(cumsum(res$sdev^2/sum(res$sdev^2)))
pc.use <- 3
trunc <- res$x[,1:pc.use] %*% t(res$rotation[,1:pc.use])
View(trunc)
res$sdev
length(res$sdev)
res$rotation
dim(res$rotation)
res$x
dim(res$x)
plot(cumsum(res$sdev^2/sum(res$sdev^2)))
if(res$scale != FALSE){
trunc <- scale(trunc, center = FALSE , scale=1/res$scale)
}
if(res$center != FALSE){
trunc <- scale(trunc, center = -1 * res$center, scale=FALSE)
}
dim(trunc); dim(Xt)
if(res$scale != FALSE){
trunc <- scale(trunc, center = FALSE , scale=1/res$scale)
}
if(res$center != FALSE){
trunc <- scale(trunc, center = -1 * res$center, scale=FALSE)
}
dim(trunc); dim(my_data1)
RAN <- range(cbind(my_data1, trunc))
BREAKS <- seq(RAN[1], RAN[2],,100)
COLS <- rainbow(length(BREAKS)-1)
par(mfcol=c(1,2), mar=c(1,1,2,1))
image(my_data1, main="Original matrix", xlab="", ylab="", xaxt="n", yaxt="n", breaks=BREAKS, col=COLS)
box()
image(trunc, main="Truncated matrix (3 PCs)", xlab="", ylab="", xaxt="n", yaxt="n", breaks=BREAKS, col=COLS)
box()
dim(trunc); dim(my_data1)
#and add the center (and re-scale) back to data
if(res$scale != FALSE){
trunc <- scale(trunc, center = FALSE , scale=1/res$scale)
}
if(res$center != FALSE){
trunc <- scale(trunc, center = -1 * res$center, scale=FALSE)
}
dim(trunc); dim(my_data1)
RAN <- range(cbind(my_data1, trunc))
BREAKS <- seq(RAN[1], RAN[2],,100)
COLS <- rainbow(length(BREAKS)-1)
par(mfcol=c(1,2), mar=c(1,1,2,1))
image(my_data1, main="Original matrix", xlab="", ylab="", xaxt="n", yaxt="n", breaks=BREAKS, col=COLS)
box()
image(trunc, main="Truncated matrix (3 PCs)", xlab="", ylab="", xaxt="n", yaxt="n", breaks=BREAKS, col=COLS)
box()
View(trunc)
View(my_data1)
trunc
str(trunc)
View(trunc)
my_data1
trunc
View(my_data1)
View(trunc)
plot(cumsum(res$sdev^2/sum(res$sdev^2)))
summary(res)
pc.use <- 4
trunc <- res$x[,1:pc.use] %*% t(res$rotation[,1:pc.use])
trunc <- as.data.frame(trunc)
View(trunc)
my_data = normalized_positions %>%
filter(Expected_response=='true')%>%
select(-Expected_response,-Subject)
my_data1 <- as.data.frame(sapply(my_data, as.numeric))
res <- prcomp(my_data1, center = TRUE, scale = FALSE)
summary(res)
plot(cumsum(res$sdev^2/sum(res$sdev^2)))
pc.use <- 4
trunc <- res$x[,1:pc.use] %*% t(res$rotation[,1:pc.use])
trunc <- as.data.frame(trunc)
View(trunc)
my_data = normalized_positions %>%
filter(Expected_response=='true')%>%
select(-Expected_response,-Subject,-Polarity)
my_data1 <- my_data %>% select(-Polarity)
my_data1 <- as.data.frame(sapply(my_data1, as.numeric))
my_data = normalized_positions %>%
filter(Expected_response=='true')%>%
select(-Expected_response,-Subject)
#PCA
my_data1 <- my_data %>% select(-Polarity)
my_data1 <- as.data.frame(sapply(my_data1, as.numeric))
RAN <- range(cbind(my_data1, trunc))
BREAKS <- seq(RAN[1], RAN[2],,100)
COLS <- rainbow(length(BREAKS)-1)
par(mfcol=c(1,2), mar=c(1,1,2,1))
image(my_data1, main="Original matrix", xlab="", ylab="", xaxt="n", yaxt="n", breaks=BREAKS, col=COLS)
box()
image(trunc, main="Truncated matrix (3 PCs)", xlab="", ylab="", xaxt="n", yaxt="n", breaks=BREAKS, col=COLS)
box()
my_data1 <- my_data %>% select(-Polarity)
my_data1 <- as.data.frame(sapply(my_data1, as.numeric))
res <- prcomp(my_data1, center = TRUE, scale = FALSE)
summary(res)
plot(cumsum(res$sdev^2/sum(res$sdev^2)))
pc.use <- 4
trunc <- res$x[,1:pc.use] %*% t(res$rotation[,1:pc.use])
trunc <- as.data.frame(trunc)
Polarity <- my_data$Polarity
trunc <- cbind(trunc, Polarity)
View(trunc)
my_data1 <- my_data %>% select(-Polarity)
my_data1 <- as.data.frame(sapply(my_data1, as.numeric))
res <- prcomp(my_data1, center = TRUE, scale = FALSE)
summary(res)
plot(cumsum(res$sdev^2/sum(res$sdev^2)))
pc.use <- 4
trunc <- res$x[,1:pc.use] %*% t(res$rotation[,1:pc.use])
trunc <- as.data.frame(trunc)
Polarity <- my_data$Polarity
trunc <- cbind(Polarity, trunc)
View(trunc)
library(MASS)
fit <- lda(formula = Polarity ~ .,
data = trunc, CV=TRUE)
res$rotation[,1:pc.use]
res$rotation
plot(cumsum(res$sdev^2/sum(res$sdev^2)))
pc.use <- 3
trunc <- res$x[,1:pc.use] %*% t(res$rotation[,1:pc.use])
res$x[1,pc:use]
res$x[1,pc.use]
res$x[,1:pc.use]
trunc <- tail(res$x, n=pc:use) %*% t(tail(res$rotation, n=pc:use))
trunc <- tail(res$x, n=pc.use) %*% t(tail(res$rotation, n=pc.use))
tail(res$x, n=pc.use
tail(res$x, n=pc.use)
tail(res$x, n=pc.use)
trunc <- res$x[,6:12] %*% t(res$rotation[,6:12])
res$x[,6:12]
trunc <- as.data.frame(trunc)
Polarity <- my_data$Polarity
trunc <- cbind(Polarity, trunc)res
trunc <- as.data.frame(trunc)
Polarity <- my_data$Polarity
trunc <- cbind(Polarity, trunc)
library(MASS)
fit <- lda(formula = Polarity ~ .,
data = trunc, CV=TRUE)
my_data2 <- my_data %>%
select(one_of(ex.x))
detach("package:MASS", unload=TRUE)
my_data2 <- my_data %>%
select(one_of(ex.x))
my_data2 <- my_data %>%
select(one_of(ex.x), Polarity)
View(my_data2)
library(MASS)
fit <- lda(formula = Polarity ~ .,
data = my_data2, CV=TRUE)
ct <- table(my_data$Polarity, fit$class)
ct
diag(prop.table(ct, 1))
ct
diag(prop.table(ct, 1))
fit <- lda(formula = Polarity ~ .,
data = my_data2, CV=TRUE)
ct <- table(my_data$Polarity, fit$class)
ct
diag(prop.table(ct, 1))
fit <- lda(formula = Polarity ~ .,
data = my_data2, CV=TRUE)
ct <- table(my_data$Polarity, fit$class)
ct
diag(prop.table(ct, 1))
fit <- lda(formula = Polarity ~ .,
data = my_data2, CV=TRUE)
ct <- table(my_data$Polarity, fit$class)
ct
diag(prop.table(ct, 1))
View(my_data2)
ex.x <- paste('x', as.character(c(25:75)), sep='')
ex.y <- paste('y', as.character(c(25:75)), sep='')
my_data2 <- my_data %>%
select(one_of(ex.x),one_of(ex.y), Polarity)
detach("package:MASS", unload=TRUE)
ex.x <- paste('x', as.character(c(25:75)), sep='')
ex.y <- paste('y', as.character(c(25:75)), sep='')
my_data2 <- my_data %>%
select(one_of(ex.x),one_of(ex.y), Polarity)
library(MASS)
fit <- lda(formula = Polarity ~ .,
data = my_data2, CV=TRUE)
RAN <- range(cbind(my_data1, trunc))
BREAKS <- seq(RAN[1], RAN[2],100)
COLS <- rainbow(length(BREAKS)-1)
par(mfcol=c(1,2), mar=c(1,1,2,1))
image(my_data1, main="Original matrix", xlab="", ylab="", xaxt="n", yaxt="n", breaks=BREAKS, col=COLS)
box()
image(trunc, main="Truncated matrix (3 PCs)", xlab="", ylab="", xaxt="n", yaxt="n", breaks=BREAKS, col=COLS)
box()
#PCA
my_data1 <- my_data %>% select(-Polarity)
my_data1 <- as.data.frame(sapply(my_data1, as.numeric))
res <- prcomp(my_data1, center = TRUE, scale = FALSE)
summary(res)
plot(cumsum(res$sdev^2/sum(res$sdev^2)))
pc.use <- 3
trunc <- res$x[,9:12] %*% t(res$rotation[,9:12])
trunc <- as.data.frame(trunc)
Polarity <- my_data$Polarity
trunc <- cbind(Polarity, trunc)
library(MASS)
fit <- lda(formula = Polarity ~ .,
data = my_data2, CV=TRUE)
RAN <- range(cbind(my_data1, trunc))
BREAKS <- seq(RAN[1], RAN[2],100)
COLS <- rainbow(length(BREAKS)-1)
par(mfcol=c(1,2), mar=c(1,1,2,1))
image(my_data1, main="Original matrix", xlab="", ylab="", xaxt="n", yaxt="n", breaks=BREAKS, col=COLS)
box()
image(trunc, main="Truncated matrix (3 PCs)", xlab="", ylab="", xaxt="n", yaxt="n", breaks=BREAKS, col=COLS)
box()
n
image(my_data1, main="Original matrix", xlab="", ylab="", xaxt="n", yaxt="n", breaks=BREAKS, col=COLS)
