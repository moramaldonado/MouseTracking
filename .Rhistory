dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104) %>%
mutate(X.Position = as.numeric(X.Position))%>%
mutate(Item.number = as.factor(Item.number))
normalized_positions.plot.Y = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104) %>%
mutate(X.Position = as.numeric(Y.Position))%>%
mutate(Item.number = as.factor(Item.number))
summary(normalized_positions.plot.Y)
normalized_positions.plot.Y = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104) %>%
mutate(Y.Position = as.numeric(Y.Position))%>%
mutate(Item.number = as.factor(Item.number))
summary(normalized_positions.plot.Y)
normalized_positions_false = normalized_positions%>%
filter(Expected_response=='false')%>%
dplyr::mutate_at(vars(starts_with('x')), funs('-'))
normalized_positions_true = filter(normalized_positions, Expected_response=='true')
normalized_positions = bind_rows(normalized_positions_false,normalized_positions_true)
rm(normalized_positions_true, normalized_positions_false)
summary(normalized_positions.plot.X)
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104) %>%
mutate(X.Position = as.numeric(X.Position))%>%
mutate(Item.number = as.factor(Item.number))
normalized_positions.plot.Y = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104) %>%
mutate(Y.Position = as.numeric(Y.Position))%>%
mutate(Item.number = as.factor(Item.number))
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104) %>%
mutate(X.Position = as.numeric(X.Position))%>%
mutate(Item.number = as.factor(Item.number))
normalized_positions.plot <- merge(normalized_positions.plot.X,normalized_positions.plot.Y)
summary(normalized_positions.plot.X)
summary(normalized_positions)
summary(normalized_positions.plot.X)
normalized_positions$Subject <- factor(normalized_positions$Subject)
normalized_positions$Item.number <- factor(normalized_positions$Item.number)
normalized_positions$Polarity <- factor(normalized_positions$Polarity)
normalized_positions$Expected_response <- factor(normalized_positions$Expected_response)
#Correlation matrix
x_correlations <- cor(dplyr::select(normalized_positions, starts_with("x"))) > 0.95
y_correlations <- cor(dplyr::select(normalized_positions, starts_with("y"))) > 0.95
for (r in 1:100){
if (x[r]!='SACAR'){
for (c in (r+1):101){
m <- paste('x', as.character(c), sep='')
if(x_correlations[r,m] == TRUE)
{x[c]='SACAR'}
else{break}
}}}
for (r in 1:100){
if (y[r]!='SACAR'){
for (c in (r+1):101){
m <- paste('y', as.character(c), sep='')
if(y_correlations[r,m] == TRUE)
{y[c]='SACAR'}
else{break}
}}}
x.subset <- x[x != "SACAR"];
y.subset <- y[y != "SACAR"];
normalized_positions.new <- normalized_positions %>%
#  dplyr::select(Subject, Item.number, Polarity, Expected_response, one_of(x.subset), one_of(y.subset))%>%
dplyr::select(Subject, Item.number, Polarity, Expected_response, one_of(x.subset))%>%
mutate(Deviation=ifelse(Polarity == "deviated", "NonCentral", "Central"))
#m_lda <- lda(x=dplyr::select(normalized_positions.new, starts_with("x"), starts_with("y")),
m_lda <- lda(x=dplyr::select(normalized_positions.new, starts_with("x")),
grouping=normalized_positions.new$Deviation)
v_lda <- m_lda$scaling
#b_lda <- mean(as.matrix(dplyr::select(normalized_positions.new, starts_with("x"), starts_with("y"))) %*% v_lda)
b_lda <- mean(as.matrix(dplyr::select(normalized_positions.new, starts_with("x"))) %*% v_lda)
save(v_lda, b_lda, x.subset, y.subset, file="transformation.RData")
lda_measure.df <- data_frame(
#lda_measure=c(as.matrix(dplyr::select(normalized_positions.new, starts_with("x"), starts_with("y"))) %*% v_lda- b_lda),
lda_measure=c(as.matrix(dplyr::select(normalized_positions.new, starts_with("x"))) %*% v_lda- b_lda),
Deviation=c(normalized_positions.new$Deviation),
Subject = c(normalized_positions.new$Subject),
Expected_response = normalized_positions.new$Expected_response,
Item.number = c(normalized_positions.new$Item.number))
ggplot(lda_measure.df, aes(x=lda_measure, fill=Deviation)) +
geom_histogram(binwidth=.5,  position="dodge")+
theme(legend.position = "top") +
facet_grid(.~Expected_response)
# Taking the negative of false items, to have everything in the same scale
normalized_positions.plot_false = normalized.plot_positions%>%
filter(Expected_response=='false')%>%
dplyr::mutate_at(vars(starts_with('x')), funs('-'))
normalized_positions.plot_true = filter(normalized_positions.plot, Expected_response=='true')
normalized_positions.plot = bind_rows(normalized_positions.plot_false,normalized_positions.plot_true)
normalized_positions.plot_false = normalized_positions.plor%>%
filter(Expected_response=='false')%>%
dplyr::mutate_at(vars(starts_with('x')), funs('-'))
normalized_positions.plot_true = filter(normalized_positions.plot, Expected_response=='true')
normalized_positions.plot = bind_rows(normalized_positions.plot_false,normalized_positions.plot_true)
normalized_positions.plot_false = normalized_positions.plor%>%
filter(Expected_response=='false')%>%
dplyr::mutate_at(vars(starts_with('x')), funs('-'))
# Taking the negative of false items, to have everything in the same scale
normalized_positions.plot_false = normalized_positions.plor%>%
filter(Expected_response=='false')%>%
dplyr::mutate_at(vars('X.Position'), funs('-'))
normalized_positions.plot_true = filter(normalized_positions.plot, Expected_response=='true')
normalized_positions.plot = bind_rows(normalized_positions.plot_false,normalized_positions.plot_true)
normalized_positions.plot_false = normalized_positions.plot%>%
filter(Expected_response=='false')%>%
dplyr::mutate_at(vars('X.Position'), funs('-'))
normalized_positions.plot <- merge(normalized_positions.plot.X,normalized_positions.plot.Y)
normalized_positions.plot_false = normalized_positions.plot%>%
filter(Expected_response=='false')%>%
dplyr::mutate_at(vars('X.Position'), funs('-'))
normalized_positions.plot$X.Position
normalized_positions.plot_false <- normalized_positions.plot%>%
filter(Expected_response=='false')%>%
dplyr::mutate_at(vars('X.Position'), funs('-'))
normalized_positions.plot_false <- normalized_positions.plot%>%
filter(Expected_response=='false')%>%
dplyr::mutate_at('X.Position', funs('-'))
normalized_positions.plot_true = filter(normalized_positions.plot, Expected_response=='true')
normalized_positions.plot = bind_rows(normalized_positions.plot_false,normalized_positions.plot_true)
summary(normalized_positions)
summary(normalized_positions.olot)
summary(normalized_positions.plot)
normalized_positions.plot_false <- normalized_positions.plot%>%
filter(Expected_response=='false')
summary(normalized_positions.plot_false)
normalized_positions.plot_false <- normalized_positions.plot%>%
filter(Expected_response=='false')%>%
dplyr::mutate_at('X.Position', funs('-'))
summary(normalized_positions.plot_false)
normalized_positions.plot.Y = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104) %>%
mutate(Y.Position = as.numeric(Y.Position))%>%
mutate(Item.number = as.factor(Item.number))
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104) %>%
mutate(X.Position = as.numeric(X.Position))%>%
mutate(Item.number = as.factor(Item.number))
normalized_positions.plot <- merge(normalized_positions.plot.X,normalized_positions.plot.Y)
normalized_positions.plot.Y = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104) %>%
mutate(Y.Position = as.numeric(Y.Position))%>%
mutate(Item.number = as.factor(Item.number))
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104) %>%
mutate(X.Position = as.numeric(X.Position))%>%
mutate(Item.number = as.factor(Item.number))
normalized_positions.plot_raw <- merge(normalized_positions.plot.X,normalized_positions.plot.Y)
# Taking the negative of false items, to have everything in the same scale
normalized_positions.plot_false <- normalized_positions.plot_raw%>%
filter(Expected_response=='false')%>%
dplyr::mutate_at('X.Position', funs('-'))
normalized_positions.plot_true = filter(normalized_positions.plot_raw, Expected_response=='true')
normalized_positions.plot = bind_rows(normalized_positions.plot_false,normalized_positions.plot_true)
summary(normalized_positions.plot)
summary(normalized_positions.plot_raw)
with(normalized_positions.plot_raw, Item.number[X.Position == min(X.Position)])
View(normalized_positions)
View(normalized_positions.new)
View(normalized_positions.plot)
View(normalized_positions.plot_false)
View(normalized_positions.plot_raw)
normalized_positions.plot_false_raw <- normalized_positions.plot_raw%>%
filter(Expected_response=='false')
summary(normalized_positions.plot_false)
summary(normalized_positions.plot_false_raw)
source('~/WebstormProjects/negationMT/R_scripts/LDA.R', echo=TRUE)
#Plotting trajectories
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, lda_measure, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104)
normalized_positions.plot.Y = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, lda_measure,  Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104)
normalized_positions.plot <- merge(normalized_positions.plot.X,normalized_positions.plot.Y)
#rm(normalized_positions.plot.X,normalized_positions.plot.Y)
normalized_positions.plot$X.Position<- as.numeric(normalized_positions.plot$X.Position)
normalized_positions.plot$Y.Position <- as.numeric(normalized_positions.plot$Y.Position)
normalized_positions.plot$Time.Step <- as.numeric(normalized_positions.plot$Time.Step)
normalized_positions.plot$Subject <- factor(normalized_positions.plot$Subject)
normalized_positions.plot$Polarity <- factor(normalized_positions.plot$Polarity )
normalized_positions.plot$lda_measure_cut <- cut(normalized_positions.plot$lda_measure, 6)
normalized_positions.plot$grp <- paste(normalized_positions.plot$Subject,normalized_positions.plot$Item.number)
ggplot(normalized_positions.plot, aes(x=X.Position, y=Y.Position, color=Polarity, group=grp)) + geom_point(alpha=.4, size=1) + theme(legend.position = "none") +
facet_grid(lda_measure_cut~Expected_response)
source('~/WebstormProjects/negationMT/R_scripts/LDA.R', echo=TRUE)
#Plotting trajectories
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, lda_measure, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104)
normalized_positions.plot.Y = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, lda_measure,  Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104)
normalized_positions.plot <- merge(normalized_positions.plot.X,normalized_positions.plot.Y)
#rm(normalized_positions.plot.X,normalized_positions.plot.Y)
normalized_positions.plot$X.Position<- as.numeric(normalized_positions.plot$X.Position)
normalized_positions.plot$Y.Position <- as.numeric(normalized_positions.plot$Y.Position)
normalized_positions.plot$Time.Step <- as.numeric(normalized_positions.plot$Time.Step)
normalized_positions.plot$Subject <- factor(normalized_positions.plot$Subject)
normalized_positions.plot$Polarity <- factor(normalized_positions.plot$Polarity )
normalized_positions.plot$lda_measure_cut <- cut(normalized_positions.plot$lda_measure, 6)
normalized_positions.plot$grp <- paste(normalized_positions.plot$Subject,normalized_positions.plot$Item.number)
normalized_positions.plot.false = normalized_positions.plot %>%
filter(Expected_response=='false')%>%
dplyr::mutate_at('X.Position', funs('-'))
normalized_positions.plot.true = normalized_positions.plot %>%
filter(Expected_response=='true')
normalized_positions.plot <- rbind(normalized_positions.plot.false, normalized_positions.plot.true)
#Plotting real subjects
ggplot(normalized_positions.plot, aes(x=X.Position, y=Y.Position, color=Polarity, group=grp)) + geom_point(alpha=.4, size=1) + theme(legend.position = "none") +
facet_grid(lda_measure_cut~Expected_response)
ggplot(lda_measure.df, aes(x=lda_measure, fill=Deviation)) +
geom_histogram(binwidth=.5,  position="dodge")+
theme(legend.position = "top") +
facet_grid(.~Expected_response)
#Plotting trajectories
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, lda_measure, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104)
normalized_positions.plot.Y = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, lda_measure,  Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104)
normalized_positions.plot <- merge(normalized_positions.plot.X,normalized_positions.plot.Y)
#rm(normalized_positions.plot.X,normalized_positions.plot.Y)
normalized_positions.plot$X.Position<- as.numeric(normalized_positions.plot$X.Position)
normalized_positions.plot$Y.Position <- as.numeric(normalized_positions.plot$Y.Position)
normalized_positions.plot$Time.Step <- as.numeric(normalized_positions.plot$Time.Step)
normalized_positions.plot$Subject <- factor(normalized_positions.plot$Subject)
normalized_positions.plot$Polarity <- factor(normalized_positions.plot$Polarity )
normalized_positions.plot$lda_measure_cut <- cut(normalized_positions.plot$lda_measure, 10)
normalized_positions.plot$grp <- paste(normalized_positions.plot$Subject,normalized_positions.plot$Item.number)
#Plotting trajectories
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, lda_measure, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104)
normalized_positions.plot.Y = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, lda_measure,  Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104)
normalized_positions.plot <- merge(normalized_positions.plot.X,normalized_positions.plot.Y)
#rm(normalized_positions.plot.X,normalized_positions.plot.Y)
normalized_positions.plot$X.Position<- as.numeric(normalized_positions.plot$X.Position)
normalized_positions.plot$Y.Position <- as.numeric(normalized_positions.plot$Y.Position)
normalized_positions.plot$Time.Step <- as.numeric(normalized_positions.plot$Time.Step)
normalized_positions.plot$Subject <- factor(normalized_positions.plot$Subject)
normalized_positions.plot$Polarity <- factor(normalized_positions.plot$Polarity )
normalized_positions.plot$lda_measure_cut <- cut(normalized_positions.plot$lda_measure, 10)
normalized_positions.plot$grp <- paste(normalized_positions.plot$Subject,normalized_positions.plot$Item.number)
normalized_positions.plot.false = normalized_positions.plot %>%
filter(Expected_response=='false')%>%
dplyr::mutate_at('X.Position', funs('-'))
normalized_positions.plot.true = normalized_positions.plot %>%
filter(Expected_response=='true')
normalized_positions.plot <- rbind(normalized_positions.plot.false, normalized_positions.plot.true)
#Plotting real subjects
ggplot(normalized_positions.plot, aes(x=X.Position, y=Y.Position, color=Polarity, group=grp)) + geom_point(alpha=.4, size=1) + theme(legend.position = "none") +
facet_grid(lda_measure_cut~Expected_response)
#Plotting trajectories
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, lda_measure, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104)
normalized_positions.plot.Y = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, lda_measure,  Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104)
normalized_positions.plot <- merge(normalized_positions.plot.X,normalized_positions.plot.Y)
#rm(normalized_positions.plot.X,normalized_positions.plot.Y)
normalized_positions.plot$X.Position<- as.numeric(normalized_positions.plot$X.Position)
normalized_positions.plot$Y.Position <- as.numeric(normalized_positions.plot$Y.Position)
normalized_positions.plot$Time.Step <- as.numeric(normalized_positions.plot$Time.Step)
normalized_positions.plot$Subject <- factor(normalized_positions.plot$Subject)
normalized_positions.plot$Polarity <- factor(normalized_positions.plot$Polarity )
normalized_positions.plot$lda_measure_cut <- cut(normalized_positions.plot$lda_measure, 5)
normalized_positions.plot$grp <- paste(normalized_positions.plot$Subject,normalized_positions.plot$Item.number)
normalized_positions.plot.false = normalized_positions.plot %>%
filter(Expected_response=='false')%>%
dplyr::mutate_at('X.Position', funs('-'))
normalized_positions.plot.true = normalized_positions.plot %>%
filter(Expected_response=='true')
normalized_positions.plot <- rbind(normalized_positions.plot.false, normalized_positions.plot.true)
#Plotting real subjects
ggplot(normalized_positions.plot, aes(x=X.Position, y=Y.Position, color=Polarity, group=grp)) + geom_point(alpha=.4, size=1) + theme(legend.position = "none") +
facet_grid(lda_measure_cut~Expected_response)
source('~/WebstormProjects/negationMT/R_scripts/LDA.R', echo=TRUE)
#Plotting trajectories
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, lda_measure, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104)
normalized_positions.plot.Y = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, lda_measure,  Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104)
normalized_positions.plot <- merge(normalized_positions.plot.X,normalized_positions.plot.Y)
#rm(normalized_positions.plot.X,normalized_positions.plot.Y)
normalized_positions.plot$X.Position<- as.numeric(normalized_positions.plot$X.Position)
normalized_positions.plot$Y.Position <- as.numeric(normalized_positions.plot$Y.Position)
normalized_positions.plot$Time.Step <- as.numeric(normalized_positions.plot$Time.Step)
normalized_positions.plot$Subject <- factor(normalized_positions.plot$Subject)
normalized_positions.plot$Polarity <- factor(normalized_positions.plot$Polarity )
normalized_positions.plot$lda_measure_cut <- cut(normalized_positions.plot$lda_measure, 5)
normalized_positions.plot$grp <- paste(normalized_positions.plot$Subject,normalized_positions.plot$Item.number)
normalized_positions.plot.false = normalized_positions.plot %>%
filter(Expected_response=='false')%>%
dplyr::mutate_at('X.Position', funs('-'))
normalized_positions.plot.true = normalized_positions.plot %>%
filter(Expected_response=='true')
normalized_positions.plot <- rbind(normalized_positions.plot.false, normalized_positions.plot.true)
#Plotting real subjects
ggplot(normalized_positions.plot, aes(x=X.Position, y=Y.Position, color=Polarity, group=grp)) + geom_point(alpha=.4, size=1) + theme(legend.position = "none") +
facet_grid(lda_measure_cut~Expected_response)
summary(normalized_positions.plot_raw)
summary(normalized_positions.plot)
## CLEAN ENVIRONMENT
rm(list = ls())
##1. CHARGE PACKAGES
source("R_scripts/packages.R")
## 2. EXTRACTING_DATA
source("R_scripts/extracting_data.R")
## 3. CALIBRATION / Choosing measures
#source("R_scripts/choosing_measures.R")
## 4. LDA
source("R_scripts/LDA.R")
## CLEAN ENVIRONMENT
rm(list = ls())
##1. CHARGE PACKAGES
source("R_scripts/packages.R")
## 2. EXTRACTING_DATA
source("R_scripts/extracting_data.R")
## 3. CALIBRATION / Choosing measures
#source("R_scripts/choosing_measures.R")
## 4. LDA
source("R_scripts/LDA.R")
## CLEAN ENVIRONMENT
rm(list = ls())
##1. CHARGE PACKAGES
source("R_scripts/packages.R")
## 2. EXTRACTING_DATA
source("R_scripts/extracting_data.R")
## 3. CALIBRATION / Choosing measures
#source("R_scripts/choosing_measures.R")
## 4. LDA
source("R_scripts/LDA.R")
source('~/WebstormProjects/negationMT/R_scripts/LDA.R', echo=TRUE)
ggplot(lda_measure.df, aes(x=lda_measure, fill=Deviation)) +
geom_histogram(binwidth=.5,  position="dodge")+
theme(legend.position = "top") +
facet_grid(.~Expected_response)
View(normalized_positions.new)
v_lda - b_lda
## CLEAN ENVIRONMENT
rm(list = ls())
##1. CHARGE PACKAGES
source("R_scripts/packages.R")
## 2. EXTRACTING_DATA
source("R_scripts/extracting_data.R")
source('~/WebstormProjects/negationMT/R_scripts/LDA.R', echo=TRUE)
str(lda_measure.df)
## CLEAN ENVIRONMENT
rm(list = ls())
##1. CHARGE PACKAGES
source("R_scripts/packages.R")
## 2. EXTRACTING_DATA
source("R_scripts/extracting_data.R")
## 3. CALIBRATION / Choosing measures
#source("R_scripts/choosing_measures.R")
## 4. LDA
source("R_scripts/LDA.R")
str(normalized_positions.new)
source('~/WebstormProjects/negationMT/R_scripts/LDA.R', echo=TRUE)
source('~/WebstormProjects/negationMT/R_scripts/compile.R', echo=TRUE)
source('~/WebstormProjects/negationMT/R_scripts/compile.R', echo=TRUE)
source('~/WebstormProjects/negationMT/R_scripts/trajectories_before.R', echo=TRUE)
source('~/WebstormProjects/negationMT/R_scripts/trajectories_before.R', echo=TRUE)
summary(normalized_positions.plot_raw)
### ORDERING DATA
x <- paste('x', as.character(c(1:101)), sep='')
y <- paste('y', as.character(c(1:101)), sep='')
# Each x and y coordenate into two columns (101 coordenates per trial)
normalized_positions = calibration_data %>%
dplyr::select(Subject, Item.number, Polarity, Expected_response, Normalized.positions.X,Normalized.positions.Y) %>%
separate(Normalized.positions.Y, into= y, sep = ",") %>%
separate(Normalized.positions.X, into= x, sep = ",")
normalized_positions[y] <- sapply(normalized_positions[y],as.numeric)
normalized_positions[x] <- sapply(normalized_positions[x],as.numeric)
sapply(normalized_positions, class)
summary(normalized_positions)
hist(normalized_positions$x90)
hist(normalized_positions$x20)
hist(normalized_positions$x90)
hist(normalized_positions$x20)
hist(normalized_positions$x10)
hist(normalized_positions$x30)
hist(normalized_positions$x60)
hist(normalized_positions$x90)
par(mfrow=c(2,2))
par(mfrow=c(2,2))
hist(normalized_positions$x10)
hist(normalized_positions$x30)
hist(normalized_positions$x60)
hist(normalized_positions$x90)
source('~/WebstormProjects/negationMT/R_scripts/LDA.R', echo=TRUE)
#Plotting trajectories
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, lda_measure, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104)
normalized_positions.plot.Y = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, lda_measure,  Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104)
normalized_positions.plot <- merge(normalized_positions.plot.X,normalized_positions.plot.Y)
#rm(normalized_positions.plot.X,normalized_positions.plot.Y)
normalized_positions.plot$X.Position<- as.numeric(normalized_positions.plot$X.Position)
normalized_positions.plot$Y.Position <- as.numeric(normalized_positions.plot$Y.Position)
normalized_positions.plot$Time.Step <- as.numeric(normalized_positions.plot$Time.Step)
normalized_positions.plot$Subject <- factor(normalized_positions.plot$Subject)
normalized_positions.plot$Polarity <- factor(normalized_positions.plot$Polarity )
normalized_positions.plot$lda_measure_cut <- cut(normalized_positions.plot$lda_measure, 5)
normalized_positions.plot$grp <- paste(normalized_positions.plot$Subject,normalized_positions.plot$Item.number)
normalized_positions.plot.false = normalized_positions.plot %>%
filter(Expected_response=='false')%>%
dplyr::mutate_at('X.Position', funs('-'))
normalized_positions.plot.true = normalized_positions.plot %>%
filter(Expected_response=='true')
normalized_positions.plot <- rbind(normalized_positions.plot.false, normalized_positions.plot.true)
summary(normalized_positions.plot)
#Plotting real subjects
ggplot(normalized_positions.plot, aes(x=X.Position, y=Y.Position, color=Polarity, group=grp)) + geom_point(alpha=.4, size=1) + theme(legend.position = "none") +
facet_grid(lda_measure_cut~Expected_response)
ggplot(normalized_positions.plot, aes(x=Time.Step, y=X.Position, color=Polarity, group=grp)) + geom_point(alpha=.4, size=1) + geom_line()+ theme(legend.position = "none") +
facet_grid(lda_measure_cut~Expected_response)
## CLEAN ENVIRONMENT
rm(list = ls())
##1. CHARGE PACKAGES
source("R_scripts/packages.R")
## 2. EXTRACTING_DATA
source("R_scripts/extracting_data.R")
## 3. CALIBRATION / Choosing measures
#source("R_scripts/choosing_measures.R")
## 4. LDA
source("R_scripts/LDA.R")
normalized_positions.plot.X = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.X, lda_measure, Item.number) %>%
separate(Normalized.positions.X, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, X.Position, 4:104)
normalized_positions.plot.Y = calibration_data %>%
dplyr::select(Subject,Polarity, Expected_response, Normalized.positions.Y, lda_measure,  Item.number) %>%
separate(Normalized.positions.Y, into= as.character(c(1:101)), sep = ",") %>%
gather(Time.Step, Y.Position, 4:104)
normalized_positions.plot <- merge(normalized_positions.plot.X,normalized_positions.plot.Y)
normalized_positions.plot$X.Position<- as.numeric(normalized_positions.plot$X.Position)
normalized_positions.plot$Y.Position <- as.numeric(normalized_positions.plot$Y.Position)
normalized_positions.plot$Time.Step <- as.numeric(normalized_positions.plot$Time.Step)
normalized_positions.plot$Subject <- factor(normalized_positions.plot$Subject)
normalized_positions.plot$Polarity <- factor(normalized_positions.plot$Polarity )
normalized_positions.plot$lda_measure_cut <- cut(normalized_positions.plot$lda_measure, 5)
normalized_positions.plot.false = normalized_positions.plot %>%
filter(Expected_response=='false')%>%
dplyr::mutate_at('X.Position', funs('-'))
normalized_positions.plot.true = normalized_positions.plot %>%
filter(Expected_response=='true')
normalized_positions.plot <- rbind(normalized_positions.plot.false, normalized_positions.plot.true)
summary(normalized_positions.plot)
ggplot(normalized_positions.plot, aes(x=X.Position, y=Y.Position, color=Polarity, group=grp)) + geom_point(alpha=.4, size=1) + theme(legend.position = "none") +
facet_grid(lda_measure_cut~Expected_response)
source('~/WebstormProjects/negationMT/R_scripts/trajectories.R', echo=TRUE)
source('~/WebstormProjects/negationMT/R_scripts/LDA.R', echo=TRUE)
jpeg('histograms_positions(after exclusion).jpg')
par(mfrow=c(2,2))
hist(normalized_positions.new$x13)
hist(normalized_positions.new$x35)
hist(normalized_positions.new$x68)
hist(normalized_positions.new$x95)
dev.off()
par(mfrow=c(2,2))
hist(normalized_positions.new$x13)
hist(normalized_positions.new$x35)
hist(normalized_positions.new$x68)
hist(normalized_positions.new$x95)
rm(list = ls())
source("R_scripts/packages.R")
source("R_scripts/extracting_data.R")
source("R_scripts/LDA.R")
source("R_scripts/trajectories.R")
