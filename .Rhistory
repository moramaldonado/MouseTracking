p1c <- ggplot(calibration_data, aes(fill=Polarity, x=MaxRatio, color=Polarity)) + geom_histogram(alpha=.2, binwidth=10)+ theme(legend.position = "none")
p2 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDifference, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
p3 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviation, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
p4 <- ggplot(calibration_data, aes(fill=Polarity, x=Int.LogRatio.AccPeak, color=Polarity)) + geom_histogram(alpha=.2, binwidth=5)+ theme(legend.position = "none")
p5 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(Int.X.AccPeak), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1)+ theme(legend.position = "none")
p6 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviationBorder, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05) + theme(legend.position = "none")
p7 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(AUC), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1) + theme(legend.position = "none")
multiplot(p1a, p1b, p1c, p2,p3,p4,p5,p6,p7, cols = 3)
Take the sd for each measure, each condition
#1. MaxLogRatio
MaxLogRatio.sd <- aggregate(MaxLogRatio~Polarity, data=calibration_data, FUN=sd)
#2. MaxDifference
MaxDifference.sd <- aggregate(MaxDifference~Polarity, data=calibration_data, FUN=sd)
#3. MaxDeviation
MaxDeviation.sd <- aggregate(MaxDeviation~Polarity, data=calibration_data, FUN=sd)
n = 50
# Make new subjects
new_subjects = calibration_data %>%
# Select 2 unique subjects
select(Subject) %>%
distinct() %>%
# Sample subjects n times with replacement
sample_n(n, replace = T) %>%
# Order by original subject ID
arrange(Subject) %>%
# Assign subject IDs 1 to n for sampled subjects
mutate(randomID = paste("randomID", 1:n, sep = "_"))
# Add some variance per subject
# Make data for new subjects
calibration_data_new_subjects = calibration_data %>%
# Combine original data with list of new subjects to get
inner_join(new_subjects) %>%
arrange(randomID) %>%
# Make a new column for dependent variable with added variance
mutate(MaxLogRatio_NEW = MaxLogRatio + if_else(Polarity=='straight',
rnorm(1, 0, MaxLogRatio.sd[1,2]),
if_else(Polarity=='deviated',
rnorm(1, 0, MaxLogRatio.sd[2,2]),
rnorm(1, 0, MaxLogRatio.sd[3,2])))) %>%
mutate(MaxDifference_NEW = MaxDifference + if_else(Polarity=='straight',
rnorm(1, 0, MaxDifference.sd[1,2]),
if_else(Polarity=='deviated',
rnorm(1, 0, MaxDifference.sd[2,2]),
rnorm(1, 0, MaxDifference.sd[3,2])))) %>%
mutate(MaxDeviation_NEW = MaxDeviation + if_else(Polarity=='straight',
rnorm(1, 0, MaxDeviation.sd[1,2]),
if_else(Polarity=='deviated',
rnorm(1, 0, MaxDeviation.sd[2,2]),
rnorm(1, 0, MaxDeviation.sd[3,2]))))
ggplot(calibration_data_new_subjects, aes(fill=Polarity, x=MaxLogRatio_NEW, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)
View(MaxLogRatio.sd)
ggplot(calibration_data_new_subjects, aes(fill=Polarity, x=MaxLogRatio_NEW, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)
calibration_data.summary <- ddply(calibration_data_new_subjects, c("Polarity"),
function(calibration_data.summary)c(MaxLogRatio.mean=mean(calibration_data.summary$MaxLogRatio_NEW, na.rm=T), MaxLogRatio.se=se(calibration_data.summary$MaxLogRatio_NEW, na.rm=T), MaxDifference.mean=mean(calibration_data.summary$MaxDifference_NEW, na.rm=T), MaxDifference.se=se(calibration_data.summary$MaxDifference_NEW, na.rm=T), MaxDeviation.mean=mean(calibration_data.summary$MaxDeviation_NEW, na.rm=T), MaxDeviation.se=se(calibration_data.summary$MaxDeviation_NEW, na.rm=T)))
View(calibration_data.summary)
View(MaxLogRatio.sd)
View(MaxLogRatio.sd)
MaxLogRatio.sd[1,2]
View(MaxLogRatio.sd)
View(MaxDifference.sd)
and run model
n = 50
# Make new subjects
new_subjects = calibration_data %>%
# Select 2 unique subjects
select(Subject) %>%
distinct() %>%
# Sample subjects n times with replacement
sample_n(n, replace = T) %>%
# Order by original subject ID
arrange(Subject) %>%
# Assign subject IDs 1 to n for sampled subjects
mutate(randomID = paste("randomID", 1:n, sep = "_"))
# Add some variance per subject
# Make data for new subjects
calibration_data_new_subjects = calibration_data %>%
# Combine original data with list of new subjects to get
inner_join(new_subjects) %>%
arrange(randomID) %>%
# Make a new column for dependent variable with added variance
mutate(MaxLogRatio_NEW = MaxLogRatio + if_else(Polarity=='deviated',
rnorm(1, 0, MaxLogRatio.sd[1,2]),
if_else(Polarity=='straight',
rnorm(1, 0, MaxLogRatio.sd[2,2]),
rnorm(1, 0, MaxLogRatio.sd[3,2])))) %>%
mutate(MaxDifference_NEW = MaxDifference + if_else(Polarity=='deviated',
rnorm(1, 0, MaxDifference.sd[1,2]),
if_else(Polarity=='straight',
rnorm(1, 0, MaxDifference.sd[2,2]),
rnorm(1, 0, MaxDifference.sd[3,2])))) %>%
mutate(MaxDeviation_NEW = MaxDeviation + if_else(Polarity=='deviated',
rnorm(1, 0, MaxDeviation.sd[1,2]),
if_else(Polarity=='straight',
rnorm(1, 0, MaxDeviation.sd[2,2]),
rnorm(1, 0, MaxDeviation.sd[3,2]))))
ggplot(calibration_data_new_subjects, aes(fill=Polarity, x=MaxLogRatio_NEW, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)
calibration_data_new_subjects$Polarity <- factor(calibration_data_new_subjects$Polarity)
calibration.lmer <- glmer(Polarity ~ MaxLogRatio_NEW  +
(1|randomID), data = calibration_data_new_subjects, family=binomial)
calibration_data_new_subjects$straight <- if_else(calibration_data_new_subjects$Polarity=='straight',
1,
0)
calibration_data_new_subjects$deviated <- if_else(calibration_data_new_subjects$Polarity=='deviated',
1,
0)
calibration_data_new_subjects$uncertain <- if_else(calibration_data_new_subjects$Polarity=='uncertain',
1,
0)
calibration_deviated_ratio.lmer <- glmer(deviated ~ MaxLogRatio_NEW  +
(1|randomID), data = calibration_data_new_subjects, family=binomial)
summary(calibration_deviated_ratio.lmer)
calibration_uncertain_ratio.lmer <- glmer(uncertain ~ MaxLogRatio_NEW  +
(1|randomID), data = calibration_data_new_subjects, family=binomial)
summary(calibration_uncertain_ratio.lmer)
calibration_straight_ratio.lmer <- glmer(straght ~ MaxLogRatio_NEW  +
(1|randomID), data = calibration_data_new_subjects, family=binomial)
calibration_straight_ratio.lmer <- glmer(straight ~ MaxLogRatio_NEW  +
(1|randomID), data = calibration_data_new_subjects, family=binomial)
calibration_straight_ratio.lmer <- glmer(straight ~ MaxLogRatio_NEW  +
(1|randomID), data = calibration_data_new_subjects, family=binomial)
calibration_straight_ratio.lmer <- glmer(straight ~ MaxLogRatio_NEW  +
(1|randomID), data = calibration_data_new_subjects, family=binomial, control = glmerControl(optCtrl=list(maxfun=250)))
calibration_straight_ratio.lmer <- glmer(straight ~ MaxLogRatio_NEW  +
(1|randomID), data = calibration_data_new_subjects, family=binomial, control = glmerControl(optCtrl=list(maxfun=250000)))
classified_data <- calibration_data_new_subjects %>%
select(random_ID, MaxLogRatio)
classified_data <- calibration_data_new_subjects %>%
select(randomID, MaxLogRatio)
# iff MaxLogRatio > 2, 'deviated'; else 'uncertain'
classified_data <- calibration_data_new_subjects %>%
select(randomID, MaxLogRatio_NEW) %>%
mutate(classification= if_else(MaxLogRatio_NEW>2,
'class.deviation',
if_else(MaxLogRatio_NEW>0.5 & MaxLogRatio_NEW<=2,
'class.uncertain',
'class.straight')))
classified_data <- calibration_data_new_subjects %>%
select(randomID, MaxLogRatio_NEW, Polarity) %>%
mutate(classification= if_else(MaxLogRatio_NEW>2,
'class.deviation',
if_else(MaxLogRatio_NEW>0.5 & MaxLogRatio_NEW<=2,
'class.uncertain',
'class.straight')))
ggplot(classified_data, aes(fill= Polarity, x=MaxLogRatio_NEW, y=classification))+ geom_point()
ggplot(classified_data, aes(color= Polarity, x=MaxLogRatio_NEW, y=classification))+ geom_point()
source('~/WebstormProjects/negationMT/R_scripts/choosing_measures.R', echo=TRUE)
ggplot(classified_data, aes(color= Polarity, x=MaxLogRatio_NEW, y=classification))+ geom_point()
classified_data <-  data %>% filter(Sentence_Type!='calibration' & Sentence_Type != 'practice')
select(Subject, MaxLogRatio_NEW, Polarity) %>%
mutate(classification= if_else(MaxLogRatio_NEW>2,
'class.deviation',
if_else(MaxLogRatio_NEW>0.5 & MaxLogRatio_NEW<=2,
'class.uncertain',
'class.straight')))
ggplot(classified_data, aes(color= Polarity, y=MaxLogRatio_NEW, x=classification))+ geom_point()
## TEST how it does with the data I have from previous experiment
classified_data <-  data %>% filter(Sentence_Type!='calibration' & Sentence_Type != 'practice')
select(Subject, MaxLogRatio, Polarity) %>%
mutate(classification= if_else(MaxLogRatio>2,
'class.deviation',
if_else(MaxLogRatio>0.5 & MaxLogRatio<=2,
'class.uncertain',
'class.straight')))
ggplot(classified_data, aes(color= Polarity, y=MaxLogRatio, x=classification))+ geom_point()
View(data)
View(data)
data$Sentence_Type
## TEST how it does with the data I have from previous experiment
classified_data <-  data %>% filter(Sentence_Type=='EI' || Sentence_Type=='Control')
select(Subject, MaxLogRatio, Polarity) %>%
mutate(classification= if_else(MaxLogRatio>2,
'class.deviation',
if_else(MaxLogRatio>0.5 & MaxLogRatio<=2,
'class.uncertain',
'class.straight')))
ggplot(classified_data, aes(color= Polarity, y=MaxLogRatio, x=classification))+ geom_point()
classified_data <-  data %>% filter(Sentence_Type=='EI' || Sentence_Type=='Control')
## TEST how it does with the data I have from previous experiment
classified_data <-  data %>% filter(Sentence_Type=='EI' || Sentence_Type=='Control') %>%
select(Subject, MaxLogRatio, Polarity) %>%
mutate(classification= if_else(MaxLogRatio>2,
'class.deviation',
if_else(MaxLogRatio>0.5 & MaxLogRatio<=2,
'class.uncertain',
'class.straight')))
ggplot(classified_data, aes(color= Polarity, y=MaxLogRatio, x=classification))+ geom_point()
## TEST how it does with the data I have from previous experiment
classified_data <-  data %>% filter(Sentence_Type=='EI' || Sentence_Type=='Control') %>%
select(Subject, MaxLogRatio, Polarity) %>%
mutate(classification= if_else(MaxLogRatio>2,
'class.deviation',
if_else(MaxLogRatio>0.5 & MaxLogRatio<=2,
'class.uncertain',
'class.straight')))
View(classified_data)
classified_data <-  data %>% filter(Sentence_Type=='EI') %>%
select(Subject, MaxLogRatio, Polarity) %>%
mutate(classification= if_else(MaxLogRatio>2,
'class.deviation',
if_else(MaxLogRatio>0.5 & MaxLogRatio<=2,
'class.uncertain',
'class.straight')))
'class.straight')))
ggplot(classified_data, aes(color= Polarity, y=MaxLogRatio, x=classification))+ geom_point()
classified_data <- calibration_data_new_subjects %>%
select(randomID, MaxLogRatio_NEW, Polarity) %>%
mutate(classification= if_else(MaxLogRatio_NEW>2,
'class.deviation',
if_else(MaxLogRatio_NEW>0.5 & MaxLogRatio_NEW<=2,
'class.uncertain',
'class.straight')))
ggplot(classified_data, aes(color= Polarity, x=MaxLogRatio_NEW, y=classification))+ geom_point()
classified_data <- calibration_data_new_subjects %>%
select(randomID, MaxLogRatio_NEW, Polarity) %>%
mutate(classification= if_else(MaxLogRatio_NEW>2,
'class.deviation',
if_else(MaxLogRatio_NEW>0.1 & MaxLogRatio_NEW<=2,
'class.uncertain',
'class.straight')))
ggplot(classified_data, aes(color= Polarity, x=MaxLogRatio_NEW, y=classification))+ geom_point()
classified_data <- calibration_data_new_subjects %>%
select(randomID, MaxLogRatio_NEW, Polarity) %>%
mutate(classification= if_else(MaxLogRatio_NEW>2,
'class.deviation',
if_else(MaxLogRatio_NEW>0.1 & MaxLogRatio_NEW<=2,
'class.uncertain',
'class.straight')))
ggplot(classified_data, aes(color= Polarity, x=MaxLogRatio_NEW, y=classification))+ geom_point(alpha=0.2)
# iff MaxLogRatio > 2, 'deviated'; else 'uncertain'
classified_data <- calibration_data_new_subjects %>%
select(randomID, MaxLogRatio_NEW, Polarity) %>%
mutate(classification= if_else(MaxLogRatio_NEW>2,
'class.deviation',
if_else(MaxLogRatio_NEW>0.1 & MaxLogRatio_NEW<=2,
'class.uncertain',
'class.straight')))
ggplot(classified_data, aes(color= Polarity, x=MaxLogRatio_NEW, y=classification))+ geom_point(alpha=0.1)
classified_data <- calibration_data_new_subjects %>%
select(randomID, MaxLogRatio_NEW, Polarity) %>%
mutate(classification= if_else(MaxLogRatio_NEW>2,
'class.deviation',
if_else(MaxLogRatio_NEW>0.1 & MaxLogRatio_NEW<=2,
'class.uncertain',
'class.straight')))
ggplot(classified_data, aes(color= Polarity, y=MaxLogRatio_NEW, x=classification))+ geom_point(alpha=0.1)
ggplot(classified_data, aes(color= Polarity, y=MaxLogRatio_NEW, x=classification))+ geom_point(alpha=0.3)
p1a <- ggplot(calibration_data, aes(fill=Polarity, x=MaxLogRatio, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.1)+ theme(legend.position = "top")
p1b <- ggplot(calibration_data, aes(fill=Polarity, x=MaxRatio.Time, color=Polarity)) + geom_histogram(alpha=.2, binwidth=50)+ theme(legend.position = "none")
p1c <- ggplot(calibration_data, aes(fill=Polarity, x=MaxRatio, color=Polarity)) + geom_histogram(alpha=.2, binwidth=10)+ theme(legend.position = "none")
p2 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDifference, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
p3 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviation, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
p4 <- ggplot(calibration_data, aes(fill=Polarity, x=Int.LogRatio.AccPeak, color=Polarity)) + geom_histogram(alpha=.2, binwidth=5)+ theme(legend.position = "none")
p5 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(Int.X.AccPeak), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1)+ theme(legend.position = "none")
p6 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviationBorder, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05) + theme(legend.position = "none")
p7 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(AUC), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1) + theme(legend.position = "none")
multiplot(p1a, p1b, p1c, p2,p3,p4,p5,p6,p7, cols = 3)
View(calibration_data.summary)
View(calibration_data_new_subjects)
source('~/WebstormProjects/negationMT/R_scripts/choosing_measures.R', echo=TRUE)
## See the distribution in real data
p1 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxLogRatio, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.1)+ theme(legend.position = "top")
p2 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDifference, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
p3 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviation, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
p4 <- ggplot(calibration_data, aes(fill=Polarity, x=Int.LogRatio.AccPeak, color=Polarity)) + geom_histogram(alpha=.2, binwidth=5)+ theme(legend.position = "none")
p5 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(Int.X.AccPeak), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1)+ theme(legend.position = "none")
p6 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviationBorder, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05) + theme(legend.position = "none")
p7 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(AUC), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1) + theme(legend.position = "none")
multiplot(p1, p2,p3,p4,p5,p6,p7, cols = 2)
p1 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxLogRatio, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.1)+ theme(legend.position = "top")
p2 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDifference, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
p3 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviation, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
p4 <- ggplot(calibration_data, aes(fill=Polarity, x=Int.LogRatio.AccPeak, color=Polarity)) + geom_histogram(alpha=.2, binwidth=5)+ theme(legend.position = "none")
p5 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(Int.X.AccPeak), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1)+ theme(legend.position = "none")
p6 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviationBorder, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05) + theme(legend.position = "none")
p7 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(AUC), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1) + theme(legend.position = "none")
multiplot(p1, p2,p3,p4,p5,p6,cols = 2)
##1. CHARGE PACKAGES
source("R_scripts/packages.R")
## 2. EXTRACTING_DATA
source("R_scripts/extracting_data.R")
View(calibration_data)
## See the distribution in real data
p1 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxLogRatio, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.1)+ theme(legend.position = "top")
p2 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDifference, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
p3 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviation, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
p4 <- ggplot(calibration_data, aes(fill=Polarity, x=Int.LogRatio.Fin, color=Polarity)) + geom_histogram(alpha=.2, binwidth=5)+ theme(legend.position = "none")
p5 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(Int.X.AccPeak), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1)+ theme(legend.position = "none")
p6 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviationBorder, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05) + theme(legend.position = "none")
p7 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(AUC), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1) + theme(legend.position = "none")
multiplot(p1, p2,p3,p4,p5,p6,cols = 2)
## See the distribution in real data
p1 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxLogRatio, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.1)+ theme(legend.position = "top")
p2 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDifference, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
p3 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviation, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
p4 <- ggplot(calibration_data, aes(fill=Polarity, x=Int.LogRatio.Fin, color=Polarity)) + geom_histogram(alpha=.2, binwidth=5)+ theme(legend.position = "none")
p5 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(Int.X.AccPeak), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1)+ theme(legend.position = "none")
p6 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviationBorder, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05) + theme(legend.position = "none")
p7 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(AUC), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1) + theme(legend.position = "none")
multiplot(p1, p2,p3,p4,p6,p7,cols = 2)
classified_data <- calibration_data_new_subjects %>%
select(randomID, MaxLogRatio_NEW, Polarity) %>%
mutate(classification= if_else(MaxLogRatio_NEW>2,
'class.deviation',
if_else(MaxLogRatio_NEW>0.1 & MaxLogRatio_NEW <= 2,
'class.uncertain',
'class.straight')))
##SIMULATION FAKE DATA: Create fake data and run model
n = 150
# Make new subjects
new_subjects = calibration_data %>%
# Select 2 unique subjects
select(Subject) %>%
distinct() %>%
# Sample subjects n times with replacement
sample_n(n, replace = T) %>%
# Order by original subject ID
arrange(Subject) %>%
# Assign subject IDs 1 to n for sampled subjects
mutate(randomID = paste("randomID", 1:n, sep = "_"))
# Add some variance per subject
# Make data for new subjects
calibration_data_new_subjects = calibration_data %>%
# Combine original data with list of new subjects to get
inner_join(new_subjects) %>%
arrange(randomID) %>%
# Make a new column for dependent variable with added variance
mutate(MaxLogRatio_NEW = MaxLogRatio + if_else(Polarity=='deviated',
rnorm(1, 0, MaxLogRatio.sd[1,2]),
if_else(Polarity=='straight',
rnorm(1, 0, MaxLogRatio.sd[2,2]),
rnorm(1, 0, MaxLogRatio.sd[3,2])))) %>%
mutate(MaxDifference_NEW = MaxDifference + if_else(Polarity=='deviated',
rnorm(1, 0, MaxDifference.sd[1,2]),
if_else(Polarity=='straight',
rnorm(1, 0, MaxDifference.sd[2,2]),
rnorm(1, 0, MaxDifference.sd[3,2])))) %>%
mutate(MaxDeviation_NEW = MaxDeviation + if_else(Polarity=='deviated',
rnorm(1, 0, MaxDeviation.sd[1,2]),
if_else(Polarity=='straight',
rnorm(1, 0, MaxDeviation.sd[2,2]),
rnorm(1, 0, MaxDeviation.sd[3,2]))))
## WHICH MEASURE IS A BETTER PREDICTOR FOR THE CALIBRATION ##
## See the distribution in real data
p1 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxLogRatio, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.1)+ theme(legend.position = "top")
p2 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDifference, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
p3 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviation, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
p4 <- ggplot(calibration_data, aes(fill=Polarity, x=Int.LogRatio.Fin, color=Polarity)) + geom_histogram(alpha=.2, binwidth=5)+ theme(legend.position = "none")
p5 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(Int.X.AccPeak), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1)+ theme(legend.position = "none")
p6 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviationBorder, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05) + theme(legend.position = "none")
p7 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(AUC), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1) + theme(legend.position = "none")
multiplot(p1, p2,p3,p4,p6,p7,cols = 2)
#Take the sd for each measure, each condition
#1. MaxLogRatio
MaxLogRatio.sd <- aggregate(MaxLogRatio~Polarity, data=calibration_data, FUN=sd)
#2. MaxDifference
MaxDifference.sd <- aggregate(MaxDifference~Polarity, data=calibration_data, FUN=sd)
#3. MaxDeviation
MaxDeviation.sd <- aggregate(MaxDeviation~Polarity, data=calibration_data, FUN=sd)
##SIMULATION FAKE DATA: Create fake data and run model
n = 150
# Make new subjects
new_subjects = calibration_data %>%
# Select 2 unique subjects
select(Subject) %>%
distinct() %>%
# Sample subjects n times with replacement
sample_n(n, replace = T) %>%
# Order by original subject ID
arrange(Subject) %>%
# Assign subject IDs 1 to n for sampled subjects
mutate(randomID = paste("randomID", 1:n, sep = "_"))
# Add some variance per subject
# Make data for new subjects
calibration_data_new_subjects = calibration_data %>%
# Combine original data with list of new subjects to get
inner_join(new_subjects) %>%
arrange(randomID) %>%
# Make a new column for dependent variable with added variance
mutate(MaxLogRatio_NEW = MaxLogRatio + if_else(Polarity=='deviated',
rnorm(1, 0, MaxLogRatio.sd[1,2]),
if_else(Polarity=='straight',
rnorm(1, 0, MaxLogRatio.sd[2,2]),
rnorm(1, 0, MaxLogRatio.sd[3,2])))) %>%
mutate(MaxDifference_NEW = MaxDifference + if_else(Polarity=='deviated',
rnorm(1, 0, MaxDifference.sd[1,2]),
if_else(Polarity=='straight',
rnorm(1, 0, MaxDifference.sd[2,2]),
rnorm(1, 0, MaxDifference.sd[3,2])))) %>%
mutate(MaxDeviation_NEW = MaxDeviation + if_else(Polarity=='deviated',
rnorm(1, 0, MaxDeviation.sd[1,2]),
if_else(Polarity=='straight',
rnorm(1, 0, MaxDeviation.sd[2,2]),
rnorm(1, 0, MaxDeviation.sd[3,2]))))
classified_data <- calibration_data_new_subjects %>%
select(randomID, MaxLogRatio_NEW, Polarity) %>%
mutate(classification= if_else(MaxLogRatio_NEW>2,
'class.deviation',
if_else(MaxLogRatio_NEW>0.1 & MaxLogRatio_NEW <= 2,
'class.uncertain',
'class.straight')))
View(classified_data)
ggplot(classified_data, aes(y=MaxLogRatio_NEW, x=classification))+ geom_point(alpha=0.3)
ggplot(classified_data, aes(x=MaxLogRatio_NEW, y=classification)) +
geom_point(shape=1,      # Use hollow circles
position=position_jitter(width=1,height=.5))
ggplot(classified_data, aes(x=MaxLogRatio_NEW, y=classification, color=Polarity)) +
geom_point(shape=1,      # Use hollow circles
position=position_jitter(width=1,height=.5))
ggplot(classified_data, aes(x=MaxLogRatio_NEW, y=classification, color=Polarity)) +
geom_point(shape=1, alpha=.2,      # Use hollow circles
position=position_jitter(width=1,height=.5))
ggplot(classified_data, aes(x=MaxLogRatio_NEW, y=classification, color=Polarity)) +
geom_point(shape=1, alpha=.3,      # Use hollow circles
position=position_jitter(width=1,height=.5))
ggplot(classified_data, aes(x=MaxLogRatio_NEW, y=classification, color=Polarity)) +
geom_point(shape=1, alpha=.5,      # Use hollow circles
position=position_jitter(width=1,height=.5))
ggplot(classified_data, aes(x=MaxLogRatio_NEW, y=classification, color=Polarity)) +
geom_point(shape=1, alpha=.5,      # Use hollow circles
position=position_jitter(width=1,height=.5)) + scale_x_log10()
ggplot(classified_data, aes(x=MaxLogRatio_NEW, y=classification, color=Polarity)) +
geom_point(shape=1, alpha=.5,      # Use hollow circles
position=position_jitter(width=1,height=.5)) + coord_cartesian(xlim=c(5, 10))
ggplot(classified_data, aes(x=MaxLogRatio_NEW, y=classification, color=Polarity)) +
geom_point(shape=1, alpha=.5,      # Use hollow circles
position=position_jitter(width=1,height=.5)) + coord_cartesian(xlim=c(0, 10))
ggplot(classified_data, aes(x=MaxLogRatio_NEW, y=classification, color=Polarity)) +
geom_point(shape=1, alpha=.5,      # Use hollow circles
position=position_jitter(width=1,height=.5)) + coord_cartesian(xlim=c(-1, 10))
ggplot(classified_data, aes(x=MaxLogRatio_NEW, y=classification, color=Polarity)) +
geom_point(shape=1, alpha=.5,      # Use hollow circles
position=position_jitter(width=1,height=.5)) + scale_x_continuous(breaks=seq(0, 8, 0.25))
ggplot(classified_data, aes(x=MaxLogRatio_NEW, y=classification, color=Polarity)) +
geom_point(shape=1, alpha=.5,      # Use hollow circles
position=position_jitter(width=1,height=.5)) + scale_x_continuous(breaks=seq(0, 8, 0.2))
ggplot(classified_data, aes(x=MaxLogRatio_NEW, y=classification, color=Polarity)) +
geom_point(shape=1, alpha=.5,      # Use hollow circles
position=position_jitter(width=1,height=.5)) + scale_x_continuous(breaks=seq(-1, 8, 0.2))
ggplot(classified_data, aes(x=MaxLogRatio_NEW, y=classification, color=Polarity)) +
geom_point(shape=2, alpha=.5,      # Use hollow circles
position=position_jitter(width=1,height=.5)) + scale_x_continuous(breaks=seq(-1, 8, 0.2))
ggplot(classified_data, aes(x=MaxLogRatio_NEW, y=classification, color=Polarity)) +
geom_point(shape=1, alpha=.5,      # Use hollow circles
position=position_jitter(width=1,height=.5)) + scale_x_continuous(breaks=seq(-1, 8, 0.1))
ggplot(classified_data, aes(x=MaxLogRatio_NEW, y=classification, color=Polarity)) +
geom_point(shape=1, alpha=.5,      # Use hollow circles
position=position_jitter(width=1,height=.5)) + scale_x_continuous(breaks=seq(-1, 8, 0.5))
##1. CHARGE PACKAGES
source("R_scripts/packages.R")
## 2. EXTRACTING_DATA
source("R_scripts/extracting_data.R")
View(calibration_data)
ggplot(calibration_data, aes(fill=Polarity, x=Median.LogRatio, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
multiplot(p1,p2,p3,p4,p6,p7,p8,cols = 2)
p1 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxLogRatio, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.1)+ theme(legend.position = "top")
p2 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDifference, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
p3 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviation, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
p4 <- ggplot(calibration_data, aes(fill=Polarity, x=Int.LogRatio.Fin, color=Polarity)) + geom_histogram(alpha=.2, binwidth=5)+ theme(legend.position = "none")
p5 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(Int.X.AccPeak), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1)+ theme(legend.position = "none")
p6 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviationBorder, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05) + theme(legend.position = "none")
p7 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(AUC), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1) + theme(legend.position = "none")
p8 <- ggplot(calibration_data, aes(fill=Polarity, x=Median.LogRatio, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
multiplot(p1,p2,p3,p4,p6,p7,p8,cols = 2)
## See the distribution in real data
p1 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxLogRatio, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.1)+ theme(legend.position = "top")
p2 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDifference, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
p3 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviation, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
p4 <- ggplot(calibration_data, aes(fill=Polarity, x=Int.LogRatio.Fin, color=Polarity)) + geom_histogram(alpha=.2, binwidth=5)+ theme(legend.position = "none")
p5 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(Int.X.AccPeak), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1)+ theme(legend.position = "none")
p6 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviationBorder, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05) + theme(legend.position = "none")
p7 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(AUC), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1) + theme(legend.position = "none")
p8 <- ggplot(calibration_data, aes(fill=Polarity, x=Median.LogRatio, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
multiplot(p1,p2,p3,p4,p6,p7,p8,cols = 3)
ggplot(calibration_data, aes(fill=Polarity, x=Median.LogRatio, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
ggplot(calibration_data, aes(fill=Polarity, x=Median.LogRatio, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.1)+ theme(legend.position = "none")
p9 <- ggplot(calibration_data, aes(fill=Polarity, x=Median.Difference, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.1)+ theme(legend.position = "none")
multiplot(p1,p2,p3,p4,p6,p7,p8,p9,cols = 3)
##1. CHARGE PACKAGES
source("R_scripts/packages.R")
## 2. EXTRACTING_DATA
source("R_scripts/extracting_data.R")
p1 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxLogRatio, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.1)+ theme(legend.position = "top")
p2 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDifference, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
p3 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviation, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = "none")
p4 <- ggplot(calibration_data, aes(fill=Polarity, x=Int.LogRatio.Fin, color=Polarity)) + geom_histogram(alpha=.2, binwidth=5)+ theme(legend.position = "none")
p5 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(Int.X.AccPeak), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1)+ theme(legend.position = "none")
p6 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviationBorder, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05) + theme(legend.position = "none")
p7 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(AUC), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1) + theme(legend.position = "none")
p8 <- ggplot(calibration_data, aes(fill=Polarity, x=Median.LogRatio, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.1)+ theme(legend.position = "none")
p9 <- ggplot(calibration_data, aes(fill=Polarity, x=Median.Difference, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.1)+ theme(legend.position = "none")
multiplot(p1,p2,p3,p4,p6,p7,p8,p9,cols = 3)
View(calibration_data)
filter(calibration_data, MaxLogRatio<2 & Polarity='deviated')
filter(calibration_data, MaxLogRatio<2 & Polarity=='deviated')
ok <- filter(calibration_data, MaxLogRatio<2 & Polarity=='deviated')
ok2 <- filter(calibration_data, MaxLogRatio>2 & Polarity=='uncertain')
View(ok)
View(ok2)
ok <- filter(calibration_data, MaxLogRatio<2 & Polarity=='deviated') %>%
filter(calibration_data, MaxDeviation>1 & Polarity=='uncertain')
ok <- filter(calibration_data, MaxLogRatio<2 & Polarity=='deviated')
ok2 <- filter(calibration_data, MaxDeviation>1 & Polarity=='uncertain')
ok3 <- filter(calibration_data, MaxDifferencez<1.5 & Polarity=='deviated')
ok3 <- filter(calibration_data, MaxDifferencz<1.5 & Polarity=='deviated')
ok3 <- filter(calibration_data, MaxDifference<1.5 & Polarity=='deviated')
View(ok3)
ok3 <- filter(calibration_data, abs(AUC)<20 & Polarity=='uncertain')
View(ok3)
View(ok)
View(data)
View(ok3)
View(ok2)
