{
    "collab_server" : "",
    "contents" : "## WHICH MEASURE IS A BETTER PREDICTOR FOR THE CALIBRATION ##\n\n## See the distribution in real data\np1 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxLogRatio, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.1)+ theme(legend.position = \"top\")\np2 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDifference, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = \"none\")\np3 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviation, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)+ theme(legend.position = \"none\")\np4 <- ggplot(calibration_data, aes(fill=Polarity, x=Int.LogRatio.Fin, color=Polarity)) + geom_histogram(alpha=.2, binwidth=5)+ theme(legend.position = \"none\")\np5 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(Int.X.AccPeak), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1)+ theme(legend.position = \"none\")\np6 <- ggplot(calibration_data, aes(fill=Polarity, x=MaxDeviationBorder, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05) + theme(legend.position = \"none\")\np7 <- ggplot(calibration_data, aes(fill=Polarity, x=abs(AUC), color=Polarity)) + geom_histogram(alpha=.2, binwidth=1) + theme(legend.position = \"none\")\nmultiplot(p1, p2,p3,p4,p6,p7,cols = 2)\n\n\n#Take the sd for each measure, each condition\n#1. MaxLogRatio \nMaxLogRatio.sd <- aggregate(MaxLogRatio~Polarity, data=calibration_data, FUN=sd)\n#2. MaxDifference\nMaxDifference.sd <- aggregate(MaxDifference~Polarity, data=calibration_data, FUN=sd)\n#3. MaxDeviation\nMaxDeviation.sd <- aggregate(MaxDeviation~Polarity, data=calibration_data, FUN=sd)\n\n##SIMULATION FAKE DATA: Create fake data and run model \nn = 150\n# Make new subjects\nnew_subjects = calibration_data %>%\n# Select 2 unique subjects\nselect(Subject) %>%\ndistinct() %>%\n# Sample subjects n times with replacement\nsample_n(n, replace = T) %>%\n# Order by original subject ID\narrange(Subject) %>%\n# Assign subject IDs 1 to n for sampled subjects\nmutate(randomID = paste(\"randomID\", 1:n, sep = \"_\"))\n  # Add some variance per subject\n\n# Make data for new subjects\ncalibration_data_new_subjects = calibration_data %>%\n# Combine original data with list of new subjects to get\ninner_join(new_subjects) %>%\n  arrange(randomID) %>%\n# Make a new column for dependent variable with added variance\nmutate(MaxLogRatio_NEW = MaxLogRatio + if_else(Polarity=='deviated',\n                                               rnorm(1, 0, MaxLogRatio.sd[1,2]),\n                                               if_else(Polarity=='straight',\n                                                       rnorm(1, 0, MaxLogRatio.sd[2,2]),\n                                                       rnorm(1, 0, MaxLogRatio.sd[3,2])))) %>%\n  \n  mutate(MaxDifference_NEW = MaxDifference + if_else(Polarity=='deviated',\n                                                 rnorm(1, 0, MaxDifference.sd[1,2]),\n                                                 if_else(Polarity=='straight',\n                                                         rnorm(1, 0, MaxDifference.sd[2,2]),\n                                                         rnorm(1, 0, MaxDifference.sd[3,2])))) %>%\n  \n  mutate(MaxDeviation_NEW = MaxDeviation + if_else(Polarity=='deviated',\n                                                     rnorm(1, 0, MaxDeviation.sd[1,2]),\n                                                     if_else(Polarity=='straight',\n                                                             rnorm(1, 0, MaxDeviation.sd[2,2]),\n                                                             rnorm(1, 0, MaxDeviation.sd[3,2]))))\n  \n\n#SEE the same as before but with FAKE data: visualizing and plotting \ncalibration_data.summary <- ddply(calibration_data_new_subjects, c(\"Polarity\"),\n                                  function(calibration_data.summary)c(MaxLogRatio.mean=mean(calibration_data.summary$MaxLogRatio_NEW, na.rm=T), MaxLogRatio.se=se(calibration_data.summary$MaxLogRatio_NEW, na.rm=T), MaxDifference.mean=mean(calibration_data.summary$MaxDifference_NEW, na.rm=T), MaxDifference.se=se(calibration_data.summary$MaxDifference_NEW, na.rm=T), MaxDeviation.mean=mean(calibration_data.summary$MaxDeviation_NEW, na.rm=T), MaxDeviation.se=se(calibration_data.summary$MaxDeviation_NEW, na.rm=T)))\nggplot(calibration_data_new_subjects, aes(fill=Polarity, x=MaxLogRatio_NEW, color=Polarity)) + geom_histogram(alpha=.2, binwidth=.05)\n\n\n\n# Testing model FAKE DATA for MAX LOG RATIO\n\ncalibration_data_new_subjects$Polarity <- factor(calibration_data_new_subjects$Polarity)\ncalibration.lmer <- glmer(Polarity ~ MaxLogRatio_NEW  +\n                            (1|randomID), data = calibration_data_new_subjects, family=binomial)\n\n\ncalibration_data_new_subjects$straight <- if_else(calibration_data_new_subjects$Polarity=='straight', \n                                                  1,\n                                                  0)\ncalibration_data_new_subjects$deviated <- if_else(calibration_data_new_subjects$Polarity=='deviated', \n                                                  1,\n                                                  0)\ncalibration_data_new_subjects$uncertain <- if_else(calibration_data_new_subjects$Polarity=='uncertain', \n                                                   1,\n                                                   0)\n\ncalibration_deviated_ratio.lmer <- glmer(deviated ~ MaxLogRatio_NEW  +\n                            (1|randomID), data = calibration_data_new_subjects, family=binomial)\ncalibration_uncertain_ratio.lmer <- glmer(uncertain ~ MaxLogRatio_NEW  +\n                                           (1|randomID), data = calibration_data_new_subjects, family=binomial)\n\ncalibration_straight_ratio.lmer <- glmer(straight ~ MaxLogRatio_NEW  +\n                                            (1|randomID), data = calibration_data_new_subjects, family=binomial)\n\n\n\n## FIND A THRESHOLD\n\n# iff MaxLogRatio > 2, 'deviated'; else 'uncertain'\nclassified_data <- calibration_data_new_subjects %>%\n  select(randomID, MaxLogRatio_NEW, Polarity) %>%\n  mutate(classification= if_else(MaxLogRatio_NEW>2,\n                                 'class.deviation', \n                                 if_else(MaxLogRatio_NEW>0.1 & MaxLogRatio_NEW <= 2, \n                                         'class.uncertain', \n                                         'class.straight')))\nggplot(classified_data, aes(x=MaxLogRatio_NEW, y=classification, color=Polarity)) +\n  geom_point(shape=1, alpha=.5,      # Use hollow circles\n             position=position_jitter(width=1,height=.5)) + scale_x_continuous(breaks=seq(-1, 8, 0.5)) \n  \n\n\n## TEST how it does with the data I have from previous experiment\nclassified_data <-  data %>% filter(Sentence_Type=='EI') %>%\n  select(Subject, MaxLogRatio, Polarity) %>%\n  mutate(classification= if_else(MaxLogRatio>2,\n                                 'class.deviation', \n                                 if_else(MaxLogRatio>0.5 & MaxLogRatio<=2, \n                                         'class.uncertain', \n                                         'class.straight')))\nggplot(classified_data, aes(color= Polarity, y=MaxLogRatio, x=classification))+ geom_point()\n\n\n",
    "created" : 1485190159001.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3590392127",
    "id" : "EA9C9CEF",
    "lastKnownWriteTime" : 1485450508,
    "last_content_update" : 1485450508577,
    "path" : "~/WebstormProjects/negationMT/R_scripts/choosing_measures.R",
    "project_path" : "R_scripts/choosing_measures.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}