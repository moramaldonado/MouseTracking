{
    "collab_server" : "",
    "contents" : "library(MASS) # NB: this will mask dplyr::select\n\nx <- paste('x', as.character(c(1:101)), sep='')\ny <- paste('y', as.character(c(1:101)), sep='')\n\nnormalized_positions = calibration_data %>%\n  dplyr::select(Subject, Polarity, Expected_response, Normalized.positions.X,Normalized.positions.Y) %>%\n  separate(Normalized.positions.Y, into= y, sep = \",\", convert=T) %>%\n  separate(Normalized.positions.X, into= x, sep = \",\", convert=T)\nnormalized_positions$Subject <- factor(normalized_positions$Subject)\nnormalized_positions$Polarity <- factor(normalized_positions$Polarity)\n\n## First version: PCA+LDA only on true side\n\nmy_data = normalized_positions %>%\n  filter(Expected_response=='true') %>%\n  dplyr::select(-Expected_response,-Subject) \n\n#PCA\nmy_data1 <- my_data %>% dplyr::select(-Polarity)\n#my_data1 <- as.data.frame(sapply(my_data1, as.numeric))\nres <- prcomp(my_data1, center = TRUE, scale = FALSE)\nsummary(res)\nplot(cumsum(res$sdev^2/sum(res$sdev^2)))\npc.use <- 3\ntrunc <- res$x[,1:3]\n\ntrunc <- as.data.frame(trunc)\nPolarity <- my_data$Polarity\ntrunc <- cbind(Polarity, trunc)\ntrunc$Deviation <- ifelse(trunc$Polarity == \"deviated\", \"Right\", \"Central\")\n\n#fit <- lda(formula = Deviation ~ PC1 + PC2 + PC3,  data = trunc, CV=TRUE)\nfit_true <- lda(formula = Deviation ~ PC1 + PC2 + PC3,  data = trunc, CV=FALSE)\n\n# Data for the false cases\n\ntrunc_false <- normalized_positions %>%\n  filter(Expected_response=='false') %>%\n  dplyr::select(starts_with(\"x\"), starts_with(\"y\")) %>%\n  as.matrix %>%\n  predict(res, .) %>% # Apply the PCA rotation/centering to this data\n  as.data.frame %>%\n  mutate(Polarity=normalized_positions %>% filter(Expected_response=='false') %>% .$Polarity,\n         Deviation=ifelse(Polarity==\"deviated\", \"Left\", \"Central\"))\n\nlda_measure <- data_frame(\n  lda_measure=c(predict(fit_true, trunc)$x[,1],\n                predict(fit_true, trunc_false)$x[,1]),\n  Deviation=c(trunc$Deviation, trunc_false$Deviation)\n)\n\n## Second version:\n## PCA should be on the whole data.\n## For LDA, add in the central trials from the \"false\" side. (We want\n## central trials to be treated all of a piece regardless of where they wind up)\n\nm_pca <- normalized_positions %>%\n  dplyr::select(starts_with(\"x\"), starts_with(\"y\")) %>%\n  as.matrix %>%\n  prcomp(center = TRUE, scale = FALSE)\n\nnormalized_positions_pca <- bind_cols(normalized_positions,\n                                  as.data.frame(m_pca$x[,1:10]))\n\nright_centre <- normalized_positions_pca %>%\n  filter(Expected_response=='true' | Polarity %in% c(\"straight\", \"uncertain\")) %>%\n  mutate(Deviation=ifelse(Polarity == \"deviated\", \"Right\", \"Central\"))\nleft <- normalized_positions_pca %>%\n  filter(Expected_response=='false', Polarity == \"deviated\") %>%\n  mutate(Deviation=ifelse(Polarity == \"deviated\", \"Left\", \"WTF\"))\n\nm_lda <- lda(x=dplyr::select(right_centre, starts_with(\"PC\")),\n             grouping=right_centre$Deviation)\n\nlda_measure_improved <- data_frame(\n  lda_measure=c(predict(m_lda, dplyr::select(right_centre, starts_with(\"PC\")))$x[,1],\n                predict(m_lda, dplyr::select(left, starts_with(\"PC\")))$x[,1]),\n  Deviation=c(right_centre$Deviation, left$Deviation)\n)\n\n  \n## Third version: combined classifier\n  \nv_lda_right <- m_lda$scaling\nb_lda_right <- mean(as.matrix(dplyr::select(right_centre, starts_with(\"PC\"))) %*% v_lda_right)\n\nleft_centre <- normalized_positions_pca %>%\n  filter(Expected_response=='false' | Polarity %in% c(\"straight\", \"uncertain\")) %>%\n  mutate(Deviation=ifelse(Polarity == \"deviated\", \"Right\", \"Central\"))\nm_lda_left <- lda(x=dplyr::select(left_centre, starts_with(\"PC\")),\n             grouping=right_centre$Deviation)\n\nv_lda_left <- m_lda_left$scaling\nb_lda_left <- mean(as.matrix(dplyr::select(left_centre, starts_with(\"PC\"))) %*% v_lda_left)\n\nv_lda_avg <- (v_lda_right - v_lda_left)/2\nb_lda_avg <- (b_lda_right + b_lda_left)/2\n\nlda_measure_improved_again <- data_frame(\n  lda_measure=c(as.matrix(dplyr::select(right_centre, starts_with(\"PC\"))) %*% v_lda_avg - b_lda_avg,\n                as.matrix(dplyr::select(left, starts_with(\"PC\"))) %*% v_lda_avg - b_lda_avg),\n  Deviation=c(right_centre$Deviation, left$Deviation)\n)\n\n\n",
    "created" : 1490702817230.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3107767784",
    "id" : "1FB7E011",
    "lastKnownWriteTime" : 1490702407,
    "last_content_update" : 1490702407,
    "path" : "~/Downloads/LDA_ewan (3).R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}