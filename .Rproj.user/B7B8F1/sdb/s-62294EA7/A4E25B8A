{
    "collab_server" : "",
    "contents" : "library(MASS) # NB: this will mask dplyr::select\n\n### ORDERING DATA\nx <- paste('x', as.character(c(1:101)), sep='')\ny <- paste('y', as.character(c(1:101)), sep='')\n\n# Each x and y coordenate into two columns (101 coordenates per trial) \nnormalized_positions = calibration_data %>%\n  dplyr::select(Subject, Item.number, Polarity, Expected_response, Normalized.positions.X,Normalized.positions.Y) %>%\n  separate(Normalized.positions.Y, into= y, sep = \",\", convert=T) %>%\n  separate(Normalized.positions.X, into= x, sep = \",\", convert=T) \n\n# Taking the negative of false items, to have everything in the same scale\nnormalized_positions_false = normalized_positions%>%\n  filter(Expected_response=='false')%>%\n  dplyr::mutate_at(vars(starts_with('x')), funs('-'))\nnormalized_positions_true = filter(normalized_positions, Expected_response=='true')\nnormalized_positions = bind_rows(normalized_positions_false,normalized_positions_true)\nrm(normalized_positions_true, normalized_positions_false)\n\n#last arrangements\nnormalized_positions$Subject <- factor(normalized_positions$Subject)\nnormalized_positions$Item.number <- factor(normalized_positions$Item.number)\nnormalized_positions$Polarity <- factor(normalized_positions$Polarity)\nnormalized_positions$Expected_response <- factor(normalized_positions$Expected_response)\n\n##PCA\nm_pca <- normalized_positions %>%\n  dplyr::select(starts_with(\"x\"), starts_with(\"y\")) %>%\n  as.matrix %>%\n  prcomp(center = TRUE, scale = TRUE)\n\nnormalized_positions_pca <- bind_cols(normalized_positions,\n                                      as.data.frame(m_pca$x[,1:10]))\n\nnormalized_positions_pca <- normalized_positions_pca %>%\n  mutate(Deviation=ifelse(Polarity == \"deviated\", \"NonCentral\", \"Central\"))\n\nm_lda <- lda(x=dplyr::select(normalized_positions_pca, starts_with(\"PC\")),\n             grouping=normalized_positions_pca$Deviation)\n\n# left <- normalized_positions_pca %>%\n#   filter(Expected_response=='false', Polarity == \"deviated\") %>%\n#   mutate(Deviation=ifelse(Polarity == \"deviated\", \"Left\", \"WTF\"))\n\n## Third version: combined classifier\nv_lda <- m_lda$scaling\nb_lda <- mean(as.matrix(dplyr::select(normalized_positions_pca, starts_with(\"PC\"))) %*% v_lda)\n#save(m_pca, v_lda, b_lda, file=\"transformation.RData\")\n\n\n##new\nlda_measure.df <- data_frame(\n  lda_measure=c(as.matrix(dplyr::select(normalized_positions_pca, starts_with(\"PC\"))) %*% v_lda - b_lda),\n  Deviation=c(normalized_positions_pca$Deviation), \n  Subject = c(normalized_positions_pca$Subject), \n  Expected_response = normalized_positions_pca$Expected_response,\n  Item.number = c(normalized_positions_pca$Item.number))\n\nggplot(lda_measure.df, aes(fill=Deviation, x=lda_measure, fill=Deviation)) + \n  geom_histogram(binwidth=1,  position=\"dodge\")+ \n  theme(legend.position = \"top\") + \n  facet_grid(.~Expected_response)\n\nggsave('LDA-classification.png', plot = last_plot(), scale = 1, dpi = 300)\n\ncalibration_data <- dplyr::full_join(lda_measure.df, calibration_data, by=c(\"Subject\", \"Item.number\", \"Expected_response\"))\n\n\n\n\n\n##Fake data (just in case)\n# normalized_positions.fake = calibration_data_new_subjects %>%\n#   dplyr::select(Subject, Polarity, Expected_response, Normalized.positions.X,Normalized.positions.Y) %>%\n#   separate(Normalized.positions.Y, into= y, sep = \",\", convert=T) %>%\n#   separate(Normalized.positions.X, into= x, sep = \",\", convert=T)\n# normalized_positions.fake$Subject <- factor(normalized_positions.fake$Subject)\n# normalized_positions.fake$Polarity <- factor(normalized_positions.fake$Polarity)\n\n## PCA should be on the whole data.\n## For LDA, add in the central trials from the \"false\" side. (We want\n## central trials to be treated all of a piece regardless of where they wind up)",
    "created" : 1490705229685.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "357292606",
    "id" : "A4E25B8A",
    "lastKnownWriteTime" : 1490705987,
    "last_content_update" : 1490705987563,
    "path" : "~/WebstormProjects/negationMT/R_scripts/LDA+PCA.R",
    "project_path" : "R_scripts/LDA+PCA.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}