{
    "collab_server" : "",
    "contents" : "library(MASS) # NB: this will mask dplyr::select\n##LOADING THE DATA FROM CALIBRATION\nload('transformation_all.RData')\n#load('transformation.RData')\n\nx <- paste0('x', sprintf(\"%03d\", c(1:101)))\ny <- paste0('y', sprintf(\"%03d\", c(1:101)))\n\n# Each x and y coordenate into two columns (101 coordenates per trial) \nnormalized_positions = controls %>%\n  dplyr::select(Subject, Item.number, Sentence_Type, Truth.value, X.Position,Y.Position) %>%\n  separate(X.Position, into= x, sep = \",\") %>%\n  separate(Y.Position, into= y, sep = \",\")\nnormalized_positions[y] <- sapply(normalized_positions[y],as.numeric)\nnormalized_positions[x] <- sapply(normalized_positions[x],as.numeric)\n\n\n# Taking the negative of false items, to have everything in the same scale\nnormalized_positions_false = normalized_positions%>%\n  filter(Truth.value=='False') %>% \n  dplyr::mutate_at(vars(starts_with('x')), funs('-'))\nnormalized_positions_true = filter(normalized_positions, Truth.value=='True')\nnormalized_positions = bind_rows(normalized_positions_false,normalized_positions_true)\n\n#More about classes\nnormalized_positions$Subject <- factor(normalized_positions$Subject)\nnormalized_positions$Sentence_Type <- factor(normalized_positions$Sentence_Type)\nnormalized_positions$Truth.value <- factor(normalized_positions$Truth.value)\n\n\n# Deltas\nfor(i in 2:101)\n{ \n  name_x <- x[i]\n  name_y <- y[i]\n  name_x_last <- x[i-1]\n  name_y_last <- y[i-1]\n  name_dx <- paste0(name_x,'_delta')\n  name_dy <- paste0(name_y,'_delta')\n  name_ddx <- paste0(name_x,'_ddelta')\n  name_ddy <- paste0(name_y,'_ddelta')\n  normalized_positions[[name_dx]] <-  normalized_positions[[name_x]] -\n    normalized_positions[[name_x_last]]\n  normalized_positions[[name_dy]] <-  normalized_positions[[name_y]] -\n    normalized_positions[[name_y_last]]\n  if (i > 2) {\n    name_dx_last <- paste0(name_x_last, '_delta')\n    name_dy_last <- paste0(name_y_last, '_delta')\n    normalized_positions[[name_ddx]] <-  normalized_positions[[name_dx]] -\n      normalized_positions[[name_dx_last]]\n    normalized_positions[[name_ddy]] <-  normalized_positions[[name_dy]] -\n      normalized_positions[[name_dy_last]]\n  }\n}\n\n\nnormalized_positions.new <- normalized_positions %>%\n dplyr::select(Subject, Item.number, Sentence_Type, Truth.value, one_of(all_data_columns))\n\nnormalized_positions.new_pca <- bind_cols(normalized_positions.new,\n                                         as.data.frame(predict(m_pca, normalized_positions.new)[,1:n_pca]))\n\nlda_measure.new.df <- data_frame(\n  lda_measure=c(as.matrix(dplyr::select(normalized_positions.new_pca, starts_with(\"PC\"))) %*% v_lda- b_lda),\n  Subject = normalized_positions.new_pca$Subject, \n  Item.number = normalized_positions.new_pca$Item.number, \n  Sentence_Type = normalized_positions.new_pca$Sentence_Type, \n  Truth.value = normalized_positions.new_pca$Truth.value)\n\n\n#Plotting LDA\nggplot(lda_measure.new.df, aes(x=lda_measure, fill=Sentence_Type)) + \n  geom_histogram(binwidth=.5,  position=\"dodge\")+ \n  theme(legend.position = \"top\") + \n  facet_grid(.~Truth.value)\nggsave('LDA_real_data.png', plot = last_plot(), scale = 1, dpi = 300, path='real_data/graphs')\n\n\nlda_measure.new.df$Item.number.cut <- cut(lda_measure.new.df$Item.number, 10)\nggplot(lda_measure.new.df, aes(x=lda_measure, fill=Sentence_Type)) + \n  geom_histogram(binwidth=.5,  position=\"dodge\")+ \n  theme(legend.position = \"top\") + \n  facet_grid(Truth.value~Item.number.cut, scale='free_x')\nggsave('LDA_real_data_across_exp.png', plot = last_plot(), scale = 1, dpi = 300, width=10, path='real_data/graphs')\n\n\n##Including the relevant lda_measure in the data\ncontrols$Subject <- factor(controls$Subject)\ncontrols$Truth.value <- factor(controls$Truth.value)\ncontrols$Sentence_Type <- factor(controls$Sentence_Type)\n\nnormalized_positions.plot$Subject <- factor(normalized_positions.plot$Subject)\nnormalized_positions.plot$Truth.value <- factor(normalized_positions.plot$Truth.value)\nnormalized_positions.plot$Sentence_Type <- factor(normalized_positions.plot$Sentence_Type)\ncontrols <- dplyr::full_join(lda_measure.new.df, controls, by=c(\"Subject\", \"Item.number\", \"Sentence_Type\", \"Truth.value\"))\nnormalized_positions.plot <- dplyr::full_join(lda_measure.new.df, normalized_positions.plot, by=c(\"Subject\", \"Item.number\", \"Sentence_Type\", \"Truth.value\"))\n\n",
    "created" : 1492249554624.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2036583455",
    "id" : "C77D3714",
    "lastKnownWriteTime" : 1492250561,
    "last_content_update" : 1492252296195,
    "path" : "~/WebstormProjects/negationMT/real_data/LDA-Derivatives-real-data.R",
    "project_path" : "real_data/LDA-Derivatives-real-data.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}